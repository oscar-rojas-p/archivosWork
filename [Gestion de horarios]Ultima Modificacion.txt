@{
    ViewBag.Title = ViewBag.NomMenu;
    Layout = "~/Views/Shared/_LayoutBoletoElectronico.cshtml";
}

<link rel="stylesheet" href="~/Scripts/lib/tpicker.css@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))">
@* <link rel="stylesheet" href="~/Scripts/lib/tpicker.css@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))"> *@
<script type="text/javascript" src="~/Scripts/lib/tpicker.js@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))"></script>

<script type="text/javascript" src="~/Scripts/MomentJS/moment.min.js"></script>
<script type="text/javascript" src="~/Scripts/MomentJS/es.js"></script>

@* estilo para mostrar datos faltantes *@
@* <style>

    @@keyframes anim{
        0% {background-color: ;}
        50% {background-color: red;} 
        100% {background-color: ;} 
    }
    
    .celdaSinDatos {
          animation: anim 2s linear ;
    }

</style> *@

<style>
    input: focus {
        background-color: yellow;
    }
    .botonNuevo {
        border-radius: 35px;
        text-align:center;
        box-shadow: 0 0 7px 0 rgb(193, 193, 193);       
    }
    .btn-circle.btn-xl {
        border-radius: 35px;
        margin-bottom: 5px;
    }
    .btn-circle {
        width: auto;
        height: 35px;
        padding: 6px 8px;
        border-radius: 15px;
        text-align: center;
        font-size: 14px;
        line-height: 1.42857;
    }

</style>

<style>
    body {
    }
    *,
    *::before,
    *::after {
    box-sizing: border-box;
    }
    .checkboxes {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    }
    .checkboxes__row {
    display: flex;
    }
    .checkboxes__row:not(:last-child) {
    border-bottom: 1px solid #eee;
    }
    .checkboxes__item {
    @* padding-right: 15px; *@
    @* width: 50%; *@
    }

    /* STYLE G */

    .checkbox.style-g {
    display: inline-block;
    position: relative;
    padding-right: 25px;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    }
    .checkbox.style-g input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
    }
    .checkbox.style-g input:checked ~ .checkbox__checkmark {
    background-color: #fff;
    }
    .checkbox.style-g input:checked ~ .checkbox__checkmark:after {
    opacity: 1;
    left: 8px;
    }
    .checkbox.style-g input:checked ~ .checkbox__body {
    font-weight: bold;
    }
    .checkbox.style-g:hover input ~ .checkbox__checkmark {
    background-color: #eee;
    }
    .checkbox.style-g:hover input:checked ~ .checkbox__checkmark {
    background-color: #eee;
    }
    .checkbox.style-g .checkbox__checkmark {
    position: absolute;
    top: 1px;
    right: 0;
    height: 22px;
    width: 22px;
    background-color: #eee;
    transition: background-color 0.25s ease;
    border-radius: 4px;
    }
    .checkbox.style-g .checkbox__checkmark:after {
    content: "";
    position: absolute;
    left: -20px;
    top: -8px;
    width: 15px;
    height: 25px;
    border: solid #0063D9;
    border-width: 0 4px 4px 0;
    transform: rotate(45deg);
    opacity: 0;
    transition: opacity 0.25s ease, left 0.25s ease;
    }
    .checkbox.style-g .checkbox__body {
    color: #333;
    line-height: 1.4;
    font-size: 16px;
    transition: font-weight 0.25s ease;
    }

    /* THANKS */
    .thanks {
    display: flex;
    justify-content: center;
    align-items: center;
    border-top: 1px solid #eee;
    margin-top: 60px;
    margin-bottom: 60px;
    padding-top: 60px;
    }
    .thanks > *:not(:last-child) {
    margin-right: 30px;
    }



</style>

<style>
    .NoRegistraHorario {
        color: #f00;
    }
    .RegistraHorario {
        color: #000000;
    }

    .icon-build {
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s;
        border: 3px solid #c7c7c7;
        border-style: outset;
        background: linear-gradient(315deg, #002052 0%,#7fa5a8 50%,#002052 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .icon-build:hover {
        transform: scale(1.4);
    }

    #tabla-horario-detalle > tbody > tr {
        height: 45px!important;
    }
    #tabla-horario-detalle > tbody > tr > td {
        vertical-align: middle;
    }

    .Excel {
        background-position: center;
        background-size: 34px 34px;
        background-repeat: no-repeat;
        background-image: url("https://img.icons8.com/color/117/000000/microsoft-excel-2019--v1.png");
    }
    .BIG:hover {
        /* border: 3px solid #bfbfbf; */
        transition: all 0.3s;
        background-size: 43px 43px;
        font-weight: 600;
        font-size: 15px;
    }
    .Excel:active {
        border: 2px solid black;
        background-position: center;
        background-size: 34px 34px;
        background-repeat: no-repeat;
        background-image: url("https://img.icons8.com/color-glass/480/000000/ms-excel.png");
    }
</style>

<style>
    input[type=time] {
        width: 100px;
        margin-left: 24px;
        margin-right: 30px
    }
</style>

<style>
    .pestania {
        text-align: center;
        width:156px;
        height:88px;
        padding-top:25%;
        position:relative;
        background:#BEC0C2;
        margin-left:-10px;
        border-radius:4px;
        cursor: pointer;
    }
    fieldset{
        border: 2px solid #ddd !important;
        box-shadow: 0px 0px 0px 0px #000;
        padding-bottom: 8px;
        border-radius:5px;
    }
    legend{
        color: #3286ecb5;
        padding-left: 10px;
        padding-right: 10px;
        margin-left: 15px !important;
        text-align: left !important;
        font-size: 18px;
        font-weight: bold;
        width: auto;
    }
</style>

<div id="divParametros" class="sombraFueraDeMapa">
    <div style="float:right; margin-top: 8px">
        <div id="divInputBusqueda">
            <input id="txtBuscar" type="text" placeholder="Búsqueda" autocomplete="off">
            <input type="text" placeholder="Búsqueda" style="display:none" autocomplete="off">
        </div>
        <div id="divBtnBuscar">
            <button id="btnBusquedaTabla" class="infoBusqueda tooltipstered">
                <i class="fa fa-search" aria-hidden="true"></i>
            </button>
        </div>
    </div>

    <div class="col-lg-12" style=" width: 346px; background-color: #5086c1;border-radius: 5px; height:60px; display: inline-block">
        <div style="text-align: center;">
            <div>
                <button id="btnSemanaAnterior" onclick="semanaAnterior();" style="background-color:#5086c1; margin-left: 0px;"><i class="fa fa-chevron-left" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
                <input type="text" value="Semana:" style="width: 81px; vertical-align:middle;" readonly="true">
                <select id="selectSemana" onchange="obtenerFechaManualmente()" style="width: 61px; height:28px !important ; vertical-align:middle;" name="Semana"></select>
                <select id="selectAnio" onchange="obtenerFechaManualmente()" style="width: 77px; height:28px !important ; vertical-align:middle;" name="Año"></select>
                <button id="btnSemanaSiguiente" onclick="semanaSiguiente();" style="background-color:#5086c1 ;"><i class="fa fa-chevron-right" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
            </div>
        </div>
        <div class="" style="text-align:center; margin-top:2px">
            <label id="fechaInicial" style="color: white;height: 20px;"> -/-/---- </label>
            <label style="color: white;margin-left:5px;margin-right:5px;font-size:15px" >  - </label>
            <label id="fechaFinal" style="color: white"> --/--/---- </label>
        </div>
    </div>
    
    <div style="float: left;" class="margenDivParametros">
        <i title="Areas" class="fa fa-institution info tooltipstered" aria-hidden="true" style="font-size: 18px; cursor: pointer; display: inline-block; margin-left: 10px;vertical-align: middle"></i>
        <select type="text" id="selectArea" onchange="ObtenerPersonas();" class="form-control" autocomplete="off" style="width:200px; height:28px !important; display: inline-block; vertical-align: middle"></select>
        <i title="Personas" class="fa fa-user info tooltipstered" aria-hidden="true" style="font-size: 18px; cursor: pointer; margin-left: 10px;display: inline-block; vertical-align: middle"></i>
        <select type="text" onchange="ListarHorarios();" id="selectPersona" class="form-control" autocomplete="off" style="width: 300px; height:28px !important;display: inline-block; vertical-align: middle"></select>
        <button title="Procesar" id="" type="button" onclick="ListarHorarios();" style="margin-left: 20px; margin-right: 8px; background-color: #3286ecb5; display: inline-block"><i id="iconCargar" class="fa fa-spinner fa-spin" style="display: none; color: #fff; font-size: 20px;margin-right:2px"></i><i class="fa fa-chevron-right" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
        <button id="Btnnuevo"  onclick="nuevaHorario(1);" type="button" class="btn btn-default btn-circle btn-xl botonNuevo" style="display: inline-block; vertical-align: middle" title="Registrar Nuevo Horario">
            <i class="fa fa-plus" style="color: #6da9f2;font-size:18px;"></i> 
            <span style="font-size: 14px; color: #808080cc; margin-left: 3px;">Nuevo</span>
        </button>   
        <button class="Excel BIG" title="Exportar a Excel" id="btnExport" onclick="exportaHorarios();" style="bottom: 8px;width: 42px; display: inline-block; margin-left: 10px; vertical-align: middle; margin-top: -7px;">
    </div>

    <div id="DivlblTitulo">
        <h2 id="lblTitulo" style="margin-top: 15px;">@ViewBag.NomMenu.Split('|')[0]</h2>
    </div>
</div>

<div id="divEditarHorariosYHorasExtras" style="width: 100%;">
    <div class="col-sm-3" style="background-color: #E0E4E5; height: 100%; width: 167px; margin-top: -8px; margin-bottom: -8px; margin-left: -10px; position:absolute">
        <div id="cajaEditarHorario" onclick="editarHorarioModal()" class="pestania" style="margin-bottom:5px ;margin-top: 5px">
            <p style="color: white; margin-top:-13px"><b>Editar<br>Programación</b></p>
        </div>
        <div id="cajaHoraExtra" onclick="editarHorasExtrasModal()" class="pestania">
            <p style="color: white; margin-top:-13px"><b>Registrar<br>Hora Extra</b></p>    
        </div>
    </div>
    <div class="col-sm-9" style="left: 165px;">
        <div>
            <div style="margin-top: 8px">
                <div class="col-sm-12">
                    <div class="col-sm-3">
                        <label for="personaHorario">Personal</label>
                    </div>
                    <div class="col-sm-9">
                        <input type="text" class="form-control" id="personaHorario"  style="width:400px;" readonly="true"></input>
                    </div>
                </div><br><br>
                <div  class="col-sm-12">
                    <div class="col-sm-3">
                        <label for="divSeleccionarTurnos">Turno</label>
                    </div>
                    <div class="col-sm-9">
                        <select id="divSeleccionarTurnos" type="text" class="form-control" id="codturno"  style="width:400px"> </select>
                    </div><br><br>
                </div>
                <div>
                    <div id="divHorarioEditar" class="col-sm-7">
                        <fieldset>
                            <legend>Horario</legend>
                            <div style="margin-right: 10px; margin-top:-15px">
                                <div>
                                    <div class="col-sm-5">
                                        <label for="inputInicioHora" title="Hora Inicio">H. Inicio</label>
                                    </div>
                                    <div class="col-sm-7">
                                        <input type="time" id="inputInicioHora" maxlength="5" class="form-control"/>
                                    </div>
                                </div><br><br>
                                <div>
                                    <div class="col-sm-5">
                                        <label for="inputFinHora" title="Hora Fin">H. Fin</label>
                                    </div>
                                    <div class="col-sm-7">
                                        <input type="time" id="inputFinHora" maxlength="5" class="form-control" />
                                    </div>
                                </div>
                                <div id="divRefrigerio">
                                    <br><br>
                                    <div class="col-sm-5">
                                        <label for="inputRegrigerio" title="Hora refrigerio">H. Ref</label>
                                    </div>
                                    <div class="col-sm-7">
                                        <input type="time" id="inputRefrigerio"  maxlength="5" class="form-control" value="00:00" />
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    @* NUEVO DIV PARA DIFERENCIAR HORAS EXTRAS CON HORARIO *@
                    <div id="divHoraExtraEditar" style="display:none" class="col-sm-7">
                        <fieldset>
                            <legend>Extra</legend>
                            <div style="margin-right: 10px; margin-top:-15px">
                                <div>
                                    <div class="col-sm-5">
                                        <label for="inputIniHrExtra" title="Hora Inicio">H. Inicio</label>
                                    </div>
                                    <div class="col-sm-7">
                                        <input type="time" id="inputIniHrExtra" maxlength="5" class="form-control"/>
                                    </div>
                                </div><br><br>
                                <div>
                                    <div class="col-sm-5">
                                        <label for="inputFinHrExtra" title="Hora Fin">H. Fin</label>
                                    </div>
                                    <div class="col-sm-7">
                                        <input type="time" id="inputFinHrExtra" maxlength="5" class="form-control" />
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>

                    <div id="divDiaDescanso" class="col-sm-5" >
                        <div style="vertical-align: middle; text-align: center;margin-top:70px">
                            <div class="col-sm-7" style="text-align:center">
                                <label for="inputDescanso" title="Establecer Descanso" >Descanso</label>
                            </div>
                            <label class="switch col-sm-5">
                                <input id="switchDescanso" type="checkbox" onchange="verificarCheckDescanso(this.checked)">
                                <span class="slider round"></span>
                            </label>
                        </div>
                    </div>
                </div>

                <div id="divEmpresasEditar">
                    <div class="col-sm-12" style="margin-top: 15px;">
                        <div class="col-sm-3">
                            <label for="selectEmpresa">Empresa</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectEmpresa"  style="width:400px"> </select>
                        </div>
                    </div>
                    <div class="col-sm-12" style="margin-top: 10px;">
                        <div class="col-sm-3">
                            <label style="padding-top:5px"  for="selectRuta">Ruta</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectRuta"  style="width:100px"> </select>
                        </div>
                    </div>
                    <div class="col-sm-12" style="margin-top: 10px;">
                        <div class="col-sm-3">
                            <label style="padding-top:5px" for="selectDestino">Lugar</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectDestino"  style="width:auto;max-width:200px"> </select>
                        </div>
                    </div>
                </div>
                @* NUEVO DIV PARA DIFERENCIAR LAS EMPRESAS DE HORAS EXTRAS CON HORARIO *@
                <div id="divEmpresasHorasExtras" style="display:none">
                    <div class="col-sm-12" style="margin-top: 15px;">
                        <div class="col-sm-3">
                            <label for="selectEmpresa2">Empresa</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectEmpresa2"  style="width:400px"> </select>
                        </div>
                    </div>
                    <div class="col-sm-12" style="margin-top: 10px;">
                        <div class="col-sm-3">
                            <label style="padding-top:5px"  for="selectRuta2">Ruta</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectRuta2"  style="width:100px"> </select>
                        </div>
                    </div>
                    <div class="col-sm-12" style="margin-top: 10px;">
                        <div class="col-sm-3">
                            <label style="padding-top:5px" for="selectDestino2">Lugar</label>
                        </div>
                        <div class="col-sm-9">
                            <select type="text" class="form-control" id="selectDestino2"  style="width:auto;max-width:200px"> </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="timepicker"></div>
    </div>
</div>

<div id="DivRegistroHorario" style="display:none;overflow:hidden">
    <div class="content" style="padding:10px 0px;">
        <div class="col-lg-12" style="margin-bottom:10px;margin-top:10px">
            <div class="col-sm-3" style="margin-top:0.5%">
                <label class="col-sm-6" for="selectTipoHorario" style="vertical-align: middle">Tipo de Horario</label>
                <select class="col-sm-6" id="selectTipoHorario" onchange="verificarVistaNuevoHorario()" class="form-control" style="width:170px; vertical-align: middle; margin-top: -5px;">
                </select>
            </div>
            <div class="col-sm-3" style="margin-top:0.5%">
                <label class="col-sm-6" for="selectUltimaProgramacion" style="vertical-align: middle">Obtener Horas</label>
                <select class="col-sm-6" id="selectUltimaProgramacion" onChange="verificarVistaNuevoHorario()" class="form-control" style="width:170px; vertical-align: middle; margin-top: -5px;">
                    <option value="0"> Ninguno </option>
                    <option value="1"> Última Programación</option>
                </select>
            </div>
        </div>  
        <div class="col-lg-12" style="margin:25px 0px 10px 0px;height:100%">
            <div class="contenedor" style="margin:0px 0px;width:100%;height:480px;overflow-y: scroll;">
                <table id="tablaHorarios" style="" class="table table-bordered table-striped">
                    <thead></thead>
                    <tbody ></tbody>
                    <tfoot></tfoot>
                </table>
                <table id="tablaUltimoHorario" style="display:none" class="table table-bordered table-striped">
                    <thead></thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>    
            </div>
        </div>
        <div class="timepicker"></div>
    </div>
</div>

<div id="divTablas">
    <div class="" style="margin:25px 0px">
        <table id="tablaHorariosLista" style="table-layout:fixed" class="table table-bordered table-striped ">
            <thead></thead>
            <tbody></tbody>
            <tfoot></tfoot>
        </table>
        <table id="tablaHorariosExportar" class="table table-bordred table-striped " style="display:none">
            <thead></thead>
            <tbody></tbody>
            <tfoot></tfoot>
        </table>
    </div>
</div>

<div id="dialog-horario-detalle">
    <table id="tabla-horario-detalle" class="table table-bordred table-striped ">
        <thead>
            <tr>
                <th>TURNO</th>
                <th>DIA</th>
                <th>HORARIO</th>
                <th>EMPRESA</th>
                <th>RUTA</th>
                <th>LUGAR</th>
            </tr>
        </thead>
        <tbody></tbody>
        <tfoot></tfoot>
    </table>
</div>

<div id="DivAnular" class="modal modal-fixed-footer ui-dialog-content ui-widget-content" style="display: none;">
    <div class="">
        <div class="form-horizontal margenTopParaModal" style="text-align: center;" role="form">
            <div>
                <img src="../Images/icoInterroga40x40.png">&nbsp;&nbsp;&nbsp;
                <span>Está seguro de realizar la operación?</span>
            </div>
            <p>Motivo:</p>
            <div>
                <textarea id="txtAreaElimina" style="width:100%;"></textarea>
            </div>  
        </div>
    </div>
</div>


<script>
    var objHorarioDetalle = {}
    const modalHorariosyHorasExtras = $('#divEditarHorariosYHorasExtras')
    const modalNuevoHorario = $('#DivRegistroHorario')
    const arrayDias = ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo'];
    let arrayMarcados = []; // { id: 1, nombre: 'Admin Admin, Admin' } ejemplo de como se llenara los datos
    let objMarcados = {};
    let arregloHorarios = [];
    let arrayDiasDisabled = [];
    const UrlGeneral = '@Url.Action("ProcGeneralPost", "GeneralPost")';
    const urlBDGeneralTGPS = '@Url.Action("ProcGeneralPostBDGeneral", "GeneralPost")';
    const urlBdParticular = '@Url.Action("ProcGeneralPostBDParticular", "GeneralPost")';

    let FechaActual = ObjUtil.ObtenerFechaActual();
    //variables
    let arrRutas = []
    const selectTipoHorario = document.getElementById('selectTipoHorario');
    const tablaHorarioDetalle = document.getElementById('tabla-horario-detalle');
    var fechaInicialGeneral = ""
    var fechaFinalGeneral = ""
    var anioactual = new Date().getFullYear()
    const dialogHorarioDetalleJQ = $('#dialog-horario-detalle')
    let areaSelect = document.getElementById('selectArea')
    let personaSelect = document.getElementById('selectPersona')
    let ultimaProgramacionSelect = document.getElementById('selectUltimaProgramacion')

    //VARIALBES EDITADO
    let turnoSeleccion = document.getElementById('divSeleccionarTurnos')
    let selectEmpresaEdit = document.getElementById('selectEmpresa')
    let selectRutaEdit = document.getElementById('selectRuta')
    let selectDestinoEdit = document.getElementById('selectDestino')
    let inputHInicio = document.getElementById('inputInicioHora')
    let inputHFin = document.getElementById('inputFinHora')
    let checkDescansoValor = document.getElementById('switchDescanso')
    let refrigerioInput = document.getElementById('inputRefrigerio')
    let inputHoraExtraInicio = document.getElementById('inputIniHrExtra')
    let inputHoraExtraFin = document.getElementById('inputFinHrExtra')
    let selectEmpresaHoraExtra = document.getElementById('selectEmpresa2')
    let selectRutaHoraExtra = document.getElementById('selectRuta2')
    let selectDestinoHoraExtra = document.getElementById('selectDestino2')

    let tieneHoraExtra = 0

    let parametroGnrlUProgramacion = ''
    var longPersonasUltPro = 0



    const numeroDeSemana = fecha => {
        const DIA_EN_MILISEGUNDOS = 1000 * 60 * 60 * 24,
            DIAS_QUE_TIENE_UNA_SEMANA = 7,
            JUEVES = 4;
        fecha = new Date(Date.UTC(fecha.getFullYear(), fecha.getMonth(), fecha.getDate()));
        let diaDeLaSemana = fecha.getUTCDay(); // Domingo es 0, sábado es 6
        if (diaDeLaSemana === 0) {
            diaDeLaSemana = 7;
        }
        fecha.setUTCDate(fecha.getUTCDate() - diaDeLaSemana + JUEVES);
        const inicioDelAño = new Date(Date.UTC(fecha.getUTCFullYear(), 0, 1));
        const diferenciaDeFechasEnMilisegundos = fecha - inicioDelAño;
        return Math.ceil(((diferenciaDeFechasEnMilisegundos / DIA_EN_MILISEGUNDOS) + 1) / DIAS_QUE_TIENE_UNA_SEMANA);
    };

    let numeroDeSemanaActual = numeroDeSemana(new Date());

    async function obtenerFechaPorAnio(semana , anio) {
        const request = {
            Procedimiento: "pna.ProcPersonaHorarioTurno", 
            Parametro: `${semana}|${anio}`,
            Indice: 18
        }
        const response = await fetch(UrlGeneral, DataFetch(request, 'POST')).then(res => res.json())
        var jsonData = response['dt0'][0];
        fechaInicialGeneral = jsonData.FechaInicio
        fechaFinalGeneral = jsonData.FechaFin
        document.querySelector('#fechaInicial').innerText = jsonData.FechaInicio;
        document.querySelector('#fechaFinal').innerText = jsonData.FechaFin;
        
    }

    //funcion para modificar la fecha por anio con los select de la barra de busqueda
    async function obtenerFechaManualmente(){
        numeroDeSemanaActual = parseInt(document.querySelector('#selectSemana').value)
    	anioactual = parseInt(document.querySelector('#selectAnio').value)
        const request = {
            Procedimiento: "pna.ProcPersonaHorarioTurno", 
            Parametro: `${numeroDeSemanaActual}|${anioactual}`, 
            Indice: 18
        }
        const response = await fetch(UrlGeneral, DataFetch(request, 'POST')).then(res => res.json())
        var jsonData = response['dt0'][0];
        fechaInicialGeneral = jsonData.FechaInicio
        fechaFinalGeneral = jsonData.FechaFin
        document.querySelector('#fechaInicial').innerText = jsonData.FechaInicio;
        document.querySelector('#fechaFinal').innerText = jsonData.FechaFin;
        ListarHorarios()
    }
    
    document.addEventListener("DOMContentLoaded", async () => {
        
        ObjUtil.Modal(modalNuevoHorario, '700', '1655px', true, false, false, true, 'Nuevo Horario'); //ObjUtil.Modal(modalNuevoHorario, '500', '1655px', true, false, false, true, 'Nuevo Horario');
        ObjUtil.Modal($('#DivAnular'), 'auto', '450px', true, false, false, true, 'Eliminar');
        ObjUtil.Modal($('#DivDetalleProgramacion'), 'auto', '500px', true, false, false, true, 'Detalle Programacion');
        ObjUtil.Modal(modalHorariosyHorasExtras, 'auto', '800px', true, false, false, true, 'Detalle Programacion');
        ObjUtil.Modal($('#DivHorasExtras'), '300', '850px', true, false, false, true, 'Horas Extras');
        ObjUtil.Modal(dialogHorarioDetalleJQ, 'auto', 'auto', true, false, false, true, 'Seleccionar Empresa');

        await cargarAnio();
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        await cargarSemana();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual)
        await eventos();
        await eventos2();
        await MostarTipoHorario();
        await ObtenerAreas();
        await ObtenerPersonas();
        await ListarHorarios();

        $('.FechasHorario').css('display', 'none');
        
        $.ui.dialog.prototype._allowInteraction = function (e) {
            return !!$(e.target).closest('.ui-dialog, .ui-datepicker, .select2-dropdown').length;
        };
        
        onKeyUpTextBuscar($('#tablaHorariosLista'))
    });
    
    async function semanaSiguiente(){
        if(numeroDeSemanaActual < 52){
            numeroDeSemanaActual += 1;
        }else{
            numeroDeSemanaActual = 1; 
            anioactual++
        }
        var today = new Date();
        var year = today.getFullYear();
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual)
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        ListarHorarios();
    }

    async function semanaAnterior(){
        if(numeroDeSemanaActual > 1){
            numeroDeSemanaActual -= 1;
        }else{
            numeroDeSemanaActual = 52;
            anioactual--;
        }
        $('#inputSemanaAnio').val('Semana N°'+ numeroDeSemanaActual);
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual);
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        ListarHorarios();
    }

    async function verificarCheckDescanso(valueDelCheck){
        checkDescansoValor.checked = valueDelCheck;
        $("#divDiaDescanso").css("display","")  
        $("#divRefrigerio").css("display","")
        $("#divSeleccionarTurnos").attr("disabled",valueDelCheck)
        $("#inputInicioHora").attr("disabled",valueDelCheck) 
        $("#inputFinHora").attr("disabled",valueDelCheck)
        $("#inputRefrigerio").attr("disabled",valueDelCheck)
        $("#selectEmpresa").attr("disabled",valueDelCheck)
        $("#selectRuta").attr("disabled",valueDelCheck)
        $("#selectDestino").attr("disabled",valueDelCheck)

        if(valueDelCheck){
            $('#inputInicioHora').val("");
            $('#inputFinHora').val("");
            $('#inputRefrigerio').val("");
            $("#divSeleccionarTurnos").val(0)
        }
    }
    //funcion para saber si la fecha que manda es anterior o posterior  ANTERIOR O IGUAL(FALSE) POSTERIOR(TRUE)
    function compararFechas(fechaComparar){
        let diaComparar = parseInt(fechaComparar.split('/')[0])
        let mesComparar = parseInt(fechaComparar.split('/')[1])
        let anioComparar = parseInt(fechaComparar.split('/')[2])

        let d = new Date();
        let fechaActual = d.toLocaleDateString()
        let diaActual = parseInt(fechaActual.split('/')[0])
        let mesActual = parseInt(fechaActual.split('/')[1])
        let anioActual = parseInt(fechaActual.split('/')[2])

        if(anioComparar>=anioActual){
            if(anioComparar==anioActual){
                if(mesComparar>=mesActual){
                    if(mesComparar==mesActual){
                        if(diaComparar>diaActual){
                            return true
                        }else{
                            return false
                        }
                    }else{
                        return true 
                    }
                }else{
                    return false
                }
            }else{
                return true 
            } 
        }else{
            return false
        }
    }   

	async function eliminarHoraExtra(indiceSobreTiempo,valorCheckDescanso){
        const Data = {
            Procedimiento: 'pna.ProcSobretiempo',
            Parametro: `${indiceSobreTiempo}|${CodigoUsuario}`,
            Indice: 40
        }
        const response = await fetch(UrlGeneral, DataFetch(Data,'POST')).then(res => res.json())
        const jsonData = response['dt0'][0]
        !valorCheckDescanso && ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado);
        if(jsonData.CodResultado == 0) {
            return
        }else{
            modalHorariosyHorasExtras.dialog('close');
            //ListarHorarios();
        }
    }
    let diaPasado = false
    async function guardarHoraExtra(indiceSobreTiempo){
        let numeroDiaSeleccionado = objHorarioDetalle.numeroDiaSeleccionado
        let fechaseleccionada = calcularFecha(fechaInicialGeneral,numeroDiaSeleccionado)
        let horaInicioInput = inputHoraExtraInicio.value
        let horaFinInput = inputHoraExtraFin.value
        let nomEmpresa = selectEmpresaHoraExtra.options[selectEmpresaHoraExtra.selectedIndex].text
        let nomRuta = selectRutaHoraExtra.options[selectRutaHoraExtra.selectedIndex].text
        //verificacion que se escriban las horas correctamente
        let horaI = parseInt(horaInicioInput.slice(0,2));
        let horaF = parseInt(horaFinInput.slice(0,2));
        let minI = parseInt(horaInicioInput.slice(3,5));
        let minF = parseInt(horaFinInput.slice(3,5));
        let horasCorrectas = true;
        if(horaI<=horaF){
            if(horaI==horaF){
                if(minI<minF){
                    horasCorrectas = true;
                }else{
                    horasCorrectas = false;
                }
            }else if(horaI<horaF){
                horasCorrectas = true;
            }
        }else{
                horasCorrectas = false;
        }
        if(horasCorrectas){
            //proc para guardar la hora extra
            const Data2 = {
                Procedimiento: 'pna.ProcSobretiempo',
                Parametro: `${indiceSobreTiempo ? indiceSobreTiempo : objHorarioDetalle.codigoPersona}|${!indiceSobreTiempo ? fechaseleccionada + '|' : '' }${horaInicioInput}|${horaFinInput}|${selectEmpresaHoraExtra.value}|${nomEmpresa}|${selectRutaHoraExtra.value}|${nomRuta}|${selectDestinoHoraExtra.value}|${CodigoUsuario}`,
                Indice: indiceSobreTiempo? 30 : 20      //30 = editado , 20 = guardado
            }
            const response2 = await fetch(UrlGeneral, DataFetch(Data2,'POST')).then(res => res.json())
            const jsonData2 = response2['dt0'][0]
            
            ObjUtil.MostrarMensaje(jsonData2.DesResultado, jsonData2.CodResultado);

            if(jsonData2.CodResultado==1){
                modalHorariosyHorasExtras.dialog("close")
                ListarHorarios()
            }
        }else{
            ObjUtil.MostrarMensaje("Rango horario incorrecto",0)
        }
    }

    function crearObj(tipo){
        let objHorarios = {
            turno : turnoSeleccion.value,
            horaInicio : inputHInicio.value,
            horaFinal : inputHFin.value,
            refrigerio : refrigerioInput.value,
            empresaVal : selectEmpresaEdit.value,
            rutaVal : selectRutaEdit.value,
            destinoVal : selectDestinoEdit.value,
            checkDescanso : checkDescansoValor.checked
        }

        let objExtras = {
            horaInicioExtra : inputHoraExtraInicio.value,
            horaFinExtra :  inputHoraExtraFin.value,
            empresaValor : selectEmpresaHoraExtra.value,
            rutaValor : selectRutaHoraExtra.value,
            destinoValor : selectDestinoHoraExtra.value
        }

        return tipo == 1 ? objHorarios : objExtras
    }

    var indiceSobreTiempo = "" 
    async function abrirModalHorariosYHorasExtras(HoraExtra,td,tieneDescanso,codigo){
        //se almacena los datos que seran usados en las funciones de editado de horario y de horas extras
        objHorarioDetalle = {
            codigo : codigo,
            codigoPersona : td.attr('data-codpersona'),
            numeroDiaSeleccionado : td.attr('data-numerodia'),
            nombreDia : td.attr('data-dia'),
            nomPersona: td.attr('data-nompersona'),
            horaInicio: td.attr('data-horainicio')?.trim(),
            horaFinal: td.attr('data-horafin')?.trim(),
            codigoTurno:td.attr('data-codturno')?.trim(),
            duracion: td.attr('data-duracion')?.trim(),
            codEmpresa: td.attr('data-codempresa').trim(),
            codRuta: td.attr('data-codruta').trim(),
            destino: td.attr('data-destino')
        }
        //condicional para que no se pueda abrir los descasos en fechas anteriores
        let fechaseleccionada = calcularFecha(fechaInicialGeneral,objHorarioDetalle.numeroDiaSeleccionado)
        diaPasado = !compararFechas(fechaseleccionada)
        if(diaPasado){
            if(tieneDescanso){
                ObjUtil.MostrarMensaje("No se puede editar horarios en dias anteriores",0)
                return
            }else{
                //bloquearModificaciones()
            }
        }
        tieneHoraExtra = HoraExtra
        //cambia el color de las cajas divs
        $("#cajaEditarHorario").css('background','#3286ecb5')
        $("#cajaHoraExtra").css('background','#BEC0C2')
        //cargando turnos al iniciar
        await llenarTurnos()
        $("#personaHorario").val(objHorarioDetalle.nomPersona)
        //llenado de la informacion del horario
        inputHInicio.value = objHorarioDetalle.horaInicio
        inputHFin.value = objHorarioDetalle.horaFinal
        refrigerioInput.value = objHorarioDetalle.duracion
        turnoSeleccion.value = objHorarioDetalle.codigoTurno
        //cargando y llenando datos de empresas solo al iniciar
        await cargarComboEmpresas();
        if(objHorarioDetalle.codigoTurno!=0)selectEmpresaEdit.value = objHorarioDetalle.codEmpresa; 
        await cargarComboRutasEditado()
        if(objHorarioDetalle.codigoTurno!=0)selectRutaEdit.value = objHorarioDetalle.codRuta; 
        await cargarComboDestinoEditado()
        if(objHorarioDetalle.codigoTurno!=0)selectDestinoEdit.value = objHorarioDetalle.destino; 

        //inicio de llenado de horas extras
        let Data = {
            Procedimiento: 'pna.ProcSobretiempo',
            Parametro: `${fechaInicialGeneral}|${fechaFinalGeneral}|${objHorarioDetalle.nombreDia}|${objHorarioDetalle.codigoPersona}`,
            Indice: 10
        }
        let response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
        let jsonData = response['dt0'][0]
        indiceSobreTiempo = jsonData?.CodSobretiempoProgramado
        let validadorDeHorasExtras = response['dt0'].length
        if(validadorDeHorasExtras!=0){
            let inicioHoraExtra = jsonData.HoraInicioSobretiempo.slice(0,-3)
            let finHoraExtra = jsonData.HoraFinSobretiempo.slice(0,-3)
            inputHoraExtraInicio.value = inicioHoraExtra
            inputHoraExtraFin.value = finHoraExtra
        }else{
            inputHoraExtraInicio.value = ""
            inputHoraExtraFin.value = ""
        }
        //carga combo de empresas para las horas extras
        await cargarComboEmpresasHorasExtras();
        if(validadorDeHorasExtras!=0)selectEmpresaHoraExtra.value = jsonData.CodEmpresa; 
        await cargarComboRutasHorasExtras()
        if(validadorDeHorasExtras!=0)selectRutaHoraExtra.value = jsonData.CodRuta; 
        await cargarComboDestinoHorasExtras()
        if(validadorDeHorasExtras!=0)selectDestinoHoraExtra.value = jsonData.OrigenDestino; 
        //almacenado de los valores inciales de la hora extra antes de guardar            
        let arrValInicialesHorasExtras = crearObj(2)
        //fin de llenado de horas extras

        //declaracion del dialog
        modalHorariosyHorasExtras.dialog({
            buttons: {
                "Eliminar": () => {
                    eliminarHoraExtra(indiceSobreTiempo)
                    ListarHorarios()
                },
                "Guardar": () => {
                    let arrValFinalesHorario = crearObj(1)
                    let identificadorCambioHorario = true
                    if(JSON.stringify(arrValInicialesHorario)==JSON.stringify(arrValFinalesHorario)){
                        identificadorCambioHorario = false
                    }

                    let arrValFinalesHorasExtras = crearObj(2)
                    let identificadorCambioHoraExtra = true
                    if(JSON.stringify(arrValInicialesHorasExtras)==JSON.stringify(arrValFinalesHorasExtras)){
                        identificadorCambioHoraExtra = false
                    }
                    //verificacion antes de guardar si se editaron los horarios
                    if(codigo){
                        if(identificadorCambioHorario){
                            guardarHorarioEditado(codigo,identificadorCambioHoraExtra)
                        }else{
                            if(identificadorCambioHoraExtra){
                                guardarHoraExtra(indiceSobreTiempo)
                            }else{
                                modalHorariosyHorasExtras.dialog('close');
                            }
                        }
                    }else{
                        identificadorCambioHorario ? guardarCambioDescanso(td,identificadorCambioHoraExtra) : modalHorariosyHorasExtras.dialog('close')
                    }
                },
                "Cerrar": () => {
                    modalHorariosyHorasExtras.dialog('close');
                }
            },
            close: () => {
                modalHorariosyHorasExtras.dialog('close');
            }
        })
        modalHorariosyHorasExtras.dialog("open") 
        //se llama a la funcion aqui para que el boton eliminar ya este declarado
        editarHorarioModal()
        //verifica si es descanso
        !diaPasado && verificarCheckDescanso(tieneDescanso);
        //almacenado de datos iniciales en un json
        let arrValInicialesHorario = crearObj(1)
        //cambio de titulo del div de horas extras
        if(!diaPasado){
            modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].style.display = ''
            if(HoraExtra ==  1) {
                modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].innerHTML="<p style='color:white;margin-top:-13px'><b>Editar<br>Hora Extra</br></p>"

            }else{
                modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].innerHTML="<p style='color:white;margin-top:-13px'><b>Registrar<br>Hora Extra</br></p>"

            }
        }else{
            if(HoraExtra == 1){
                modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].style.display = ''
                modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].innerHTML="<p style='color:white;margin-top:0px'><b>Hora Extra</b></p>"
            }else{
                modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[3].style.display = 'none'
            }
        }
    }

    function habilitarCamposHorarios(){
        $("#divHoraExtraEditar").css('display','none')
        $("#divHorarioEditar").css('display','')
        $("#divEmpresasHorasExtras").css('display','none')
        $("#divEmpresasEditar").css('display','')

        $("#divSeleccionarTurnos").attr('disabled',false)
        $("#inputInicioHora").attr('disabled',false)
        $("#inputFinHora").attr('disabled',false)
        
        $("#divRefrigerio").css('display','')
        $("#divDiaDescanso").css('display','')

        $("#selectEmpresa").attr('disabled',false)
        $("#selectRuta").attr('disabled',false)
        $("#selectDestino").attr('disabled',false)
        
        $("#selectEmpresa2").attr('disabled',false)
        $("#selectRuta2").attr('disabled',false)
        $("#selectDestino2").attr('disabled',false)
    }
    function habilitarCamposHorasExtras(){
        $("#divHoraExtraEditar").css('display','')
        $("#divHorarioEditar").css('display','none')
        $("#divEmpresasHorasExtras").css('display','')
        $("#divEmpresasEditar").css('display','none')

        $("#divSeleccionarTurnos").attr('disabled',true)

        $("#divRefrigerio").css('display','none')
        $("#divDiaDescanso").css('display','none')

        $("#selectEmpresa").attr('disabled',false)
        $("#selectRuta").attr('disabled',false)
        $("#selectDestino").attr('disabled',false)

        $("#selectEmpresa2").attr('disabled',false)
        $("#selectRuta2").attr('disabled',false)
        $("#selectDestino2").attr('disabled',false)
    }

    @* function bloquearModificaciones(){
        //horario
        turnoSeleccion.setAttribute('disabled','true')
        selectEmpresaEdit.setAttribute('disabled','true')
        selectRutaEdit.setAttribute('disabled','true')
        selectDestinoEdit.setAttribute('disabled','true')
        inputInicioHora.setAttribute('readonly','true')
        inputHFin.setAttribute('readonly','true')
        refrigerioInput.setAttribute('readonly','true')
        checkDescansoValor.setAttribute('disabled','true')
        //hora extra
        inputHoraExtraInicio.setAttribute('readonly','true')
        inputHoraExtraFin.setAttribute('readonly','true')
        selectEmpresaHoraExtra.setAttribute('disabled','true')
        selectRutaHoraExtra.setAttribute('disabled','true')
        selectDestinoHoraExtra.setAttribute('disabled','true')
    }
    function habilitarModificaciones(){
        //horario
        turnoSeleccion.setAttribute('disabled',false)
        selectEmpresaEdit.setAttribute('disabled',false)
        selectRutaEdit.setAttribute('disabled',false)
        selectDestinoEdit.setAttribute('disabled',false)
        inputInicioHora.setAttribute('readonly',false)
        inputHFin.setAttribute('readonly',false)
        refrigerioInput.setAttribute('readonly',false)
        checkDescansoValor.setAttribute('disabled',false)
        //hora extra
        inputHoraExtraInicio.setAttribute('readonly',false)
        inputHoraExtraFin.setAttribute('readonly',false)
        selectEmpresaHoraExtra.setAttribute('disabled',false)
        selectRutaHoraExtra.setAttribute('disabled',false)
        selectDestinoHoraExtra.setAttribute('disabled',false)
    } *@

    async function llenarTurnos(){
		$("#divSeleccionarTurnos").empty()
        let strCuerpoTurno = ''
        const DatosTurnos = await ObtenerTurnos();
        const jsonTurnos = DatosTurnos['dt0'];
        strCuerpoTurno += `<option style="text-align:center" value="0" >---</option>`;
        jsonTurnos.map(function (data, i) {
            strCuerpoTurno +=   `<option style="text-align:center" value="${data.CodTurno}" data-refrigerio="${data.DuracionRefrigerio}" data-nomTurno="${data.NomTurno}" data-cantidadhoras="${data.CantidadHoras}" title="${data.HoraInicio} - ${data.HoraFin} → ${data.CantidadHoras} horas">
                                    ${data.AbrevTurno}  
                                </option>`;
        })
        $("#divSeleccionarTurnos").append(strCuerpoTurno)
    }

    async function editarHorarioModal(){
        //cambio del color de la caja
        $("#cajaEditarHorario").css('background','#3286ecb5')
        $("#cajaHoraExtra").css('background','#BEC0C2')
        //ocultar el boton eliminar        
        const botonEliminar = modalHorariosyHorasExtras[0].parentElement.childNodes[2].childNodes[0].childNodes[0]
        botonEliminar.style.display = 'none'
        //ocular el boton guardar en caso sea un dia pasado
        const botonGuardar = modalHorariosyHorasExtras[0].parentElement.childNodes[2].childNodes[0].childNodes[1]
        if(diaPasado){
            botonGuardar.style.display = 'none' //oculta el boton guardar en caso sea un dia pasado
        }
        !checkDescansoValor.checked   &&  habilitarCamposHorarios()
        //cambia el nombre del modal
        let fechaseleccionada = calcularFecha(fechaInicialGeneral,objHorarioDetalle.numeroDiaSeleccionado)
        if(!diaPasado){
            modalHorariosyHorasExtras[0].parentElement.childNodes[0].childNodes[0].innerText=`Editar Programación [${objHorarioDetalle.nombreDia} ${fechaseleccionada}]`
            modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[1].innerHTML = "<p style='color: white; margin-top:-13px'><b>Editar<br>Programación</b></p>"
        }else{
            modalHorariosyHorasExtras[0].parentElement.childNodes[0].childNodes[0].innerText=`Programación [${objHorarioDetalle.nombreDia} ${fechaseleccionada}]`
            modalHorariosyHorasExtras[0].parentElement.childNodes[1].childNodes[1].childNodes[1].innerHTML = "<p style='color:white;margin-top:0px'><b>Programación</b></p>"
        }
        //cambia los inputs de HI y HF al cambio de los turnos
        turnoSeleccion.addEventListener('change', function(){
            let nombreTurno = this.options[this.selectedIndex].title
            let refrigerioTurno = this.options[this.selectedIndex].getAttribute('data-refrigerio')
            $('#inputInicioHora').val(nombreTurno.slice(0,5));
            $('#inputFinHora').val(nombreTurno.slice(8,13));
            $('#inputRefrigerio').val(refrigerioTurno)
        })
    }

    async function editarHorasExtrasModal(){
        //condicional para verificar el checkdescanso
        if(checkDescansoValor.checked || turnoSeleccion.value == 0){
            if(checkDescansoValor.checked){
                ObjUtil.MostrarMensaje("No se puede establecer Hora Extra en dia de descanso",0)
                return
            }
            if(turnoSeleccion.value == 0){
                ObjUtil.MostrarMensaje("Seleccione un turno",0)
                return
            }  
        }
        //habilita los campos que se bloquearon antes
        habilitarCamposHorasExtras()    
        //cambio del color de la caja
        $("#cajaEditarHorario").css('background','#BEC0C2')
        $("#cajaHoraExtra").css('background','#3286ecb5')
        //se establece el titulo al modal
        let fechaseleccionada = calcularFecha(fechaInicialGeneral,objHorarioDetalle.numeroDiaSeleccionado)
        if(!diaPasado){
            modalHorariosyHorasExtras[0].parentElement.childNodes[0].childNodes[0].innerText=`Programar Hora Extra [${objHorarioDetalle.nombreDia} ${fechaseleccionada}]` 
        }else{
            modalHorariosyHorasExtras[0].parentElement.childNodes[0].childNodes[0].innerText=`Hora Extra [${objHorarioDetalle.nombreDia} ${fechaseleccionada}]` 
        }
        //validar la vista del boton eliminar
        const botonEliminar = modalHorariosyHorasExtras[0].parentElement.childNodes[2].childNodes[0].childNodes[0]
        if(!diaPasado){
            tieneHoraExtra == 1 ? botonEliminar.style.display = '' : botonEliminar.style.display = 'none'  
        }else{
            botonEliminar.style.display = 'none'
        }
    }

    //funcion que guarda los cambios de horarios
    async function guardarHorarioEditado(codHorarioDetalle,identificadorCambioHoraExtra){
        let valorCheckDescanso = checkDescansoValor.checked
        let codigoTurnoSeleccionado = turnoSeleccion.value
        let nomEmpresa = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].text
        let nomRuta = selectRutaEdit.options[selectRutaEdit.selectedIndex].text
        //verificar que escriban las horas correctamente
            let horaInicioDelInput = inputHInicio.value
            let horaFinDelInput = inputHFin.value
            let horaRegriferio = refrigerioInput.value

            let horaI = parseInt(horaInicioDelInput.slice(0,2));
            let horaF = parseInt(horaFinDelInput.slice(0,2));
            let minI = parseInt(horaInicioDelInput.slice(3,5));
            let minF = parseInt(horaFinDelInput.slice(3,5));
            let horasCorrectas = true;
            if(horaI<=horaF){
                if(horaI==horaF){
                    if(minI<minF){
                        horasCorrectas = true;
                    }else{
                        horasCorrectas = false;
                    }
                }else if(horaI<horaF){
                    horasCorrectas = true;
                }
            }else if(horaI>horaF){
                    horasCorrectas = false;
            }else{
                    horasCorrectas = true;
            }
        if(horasCorrectas == true){
            parametros = `${CodigoUsuario}|${codHorarioDetalle}|${selectEmpresaEdit.value}|${nomEmpresa}|${selectRutaEdit.value}|${nomRuta}|${selectDestinoEdit.value}|${codigoTurnoSeleccionado}|${horaInicioDelInput}|${horaFinDelInput}|${horaRegriferio}|${valorCheckDescanso}` 
            const Data = {
                Procedimiento: 'pna.ProcPersonaHorarioTurno',
                Parametro: parametros,
                Indice: 31
            }
            const response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            const jsonData = response['dt0'][0]
            //si finaliza bien el guardado de la edicion del horario guarda la HE
            if (jsonData.CodResultado == 1) {
                //si se establece a descanso que tambien elimine la hora extra
                valorCheckDescanso && eliminarHoraExtra(indiceSobreTiempo,valorCheckDescanso)
                //
                if(identificadorCambioHoraExtra){
                    guardarHoraExtra(indiceSobreTiempo)
                }else{
                    //condicional cuando no se edite las horas extras y se guarde solo el horario
                    ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado)      //resultado debe aparecer solo cuando no guarde horas extras
                    ListarHorarios();
                }
                modalHorariosyHorasExtras.dialog('close');
            }else{
                //condicional cuando no se guarde correctamente el horario
                ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado)
                editarHorarioModal()
            }
        }else{
            ObjUtil.MostrarMensaje("Rango horario incorrecto en la programación de la persona",0)
        }

    }
    //funcion para cambiar de descanso a horario normal
    async function guardarCambioDescanso(fila,identificadorCambioHoraExtra){
        let duracionRefrigerio = refrigerioInput.value
        let horaInicio = inputHInicio.value
        let horaFin = inputHFin.value
        let nomEmpresa = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].text
        let nomRuta = selectRutaEdit.options[selectRutaEdit.selectedIndex].text
        let codHorario = fila.attr('data-codhorario')?.trim()
        let dia = fila.attr('data-dia')?.trim()
        let codigoTurnoSeleccionado = turnoSeleccion.value

        if(codigoTurnoSeleccionado == 0){
            ObjUtil.MostrarMensaje("Seleccione un turno",0) 
            return
        }
        
        const Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: `${CodigoUsuario}|${codHorario}|${dia}|${codigoTurnoSeleccionado}|${selectEmpresaEdit.value}|${nomEmpresa}|${selectRutaEdit.value}|${nomRuta}|${selectDestinoEdit.value}|${horaInicio}|${horaFin}|${duracionRefrigerio}`,
            Indice: 22
        }

        const response = await fetch(UrlGeneral, DataFetch(Data,'POST')).then(res => res.json())
        const jsonData = response['dt0'][0]
        
        
        if (jsonData.CodResultado == 1) {
            if(identificadorCambioHoraExtra){
                guardarHoraExtra(indiceSobreTiempo)
            }else{
                ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado) 
                ListarHorarios()
                modalHorariosyHorasExtras.dialog('close');
            }
        }else{
            //condicional cuando no se guarde correctamente el horario
            ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado) 
            editarHorarioModal()
        }
    }

    function VerificarHora(element, event, Tipo) {

        let inputSeleccionado = element[0].id;
        var valorInput = element[0].value;

        if (valorInput.length == 1 && valorInput > (Tipo == 1 ? 2:0)) {
           // valorInput = '0' + valorInput;
        }
        if (valorInput.length == 2 && event.keyCode == 8) {

            valorInput = valorInput.split("")[0];
            element[0].value = valorInput;
        }
        if (valorInput.length == 2 && event.keyCode != 8) {
            if (Tipo == 1) {
                if (valorInput > 23) {
                    valorInput = '23';
                }
            } else {
                // if (valorInput > 8) {
                //    valorInput = '08';
                //}
            }

            valorInput = valorInput + ':';
            element[0].value = valorInput;
        }
        if (valorInput.length == 4 && valorInput.split(":")[1] > 5) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
        if (valorInput.length == 5 && valorInput.split(":")[1] > 59) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }

        MostrarDato();
    }

    function MostrarDato() {

        let HoraInicio = document.getElementById('inputHoraInicio').value;
        let DuracionTotal = document.getElementById("inputDuracion").value;
        //convertDateToTimeStamp
        if (HoraInicio.length == 5) {

            let FechaHoraInicio = new Date(`04/07/2020 ${HoraInicio}:00`);

            document.getElementById("spanInicio").innerHTML  = HoraInicio;

            if (DuracionTotal.length == 5) {

                let FechaHoraDuracion = new Date(`01/01/1970 ${DuracionTotal}:00`);
                var c = (Number(FechaHoraInicio) + Number(FechaHoraDuracion) - FechaResta);
                let FechaHoraFin = new Date(c);
                let FechaFin = ObtenerFechaYHora(FechaHoraFin).split(" ")[0];
                let HoraFin = ObtenerFechaYHora(FechaHoraFin).split(" ")[1];

                document.getElementById("spanFin").innerHTML = HoraFin;
                document.getElementById("inputGuardadoFecha").value = FechaFin;
                ActivarRefrigerio(2);
            }
        }
    }

    async function ListarHorarios() { //Primer paso
        $('#iconCargar').css('display', '');
        $('#tablaHorariosLista thead').empty();
        $('#tablaHorariosLista tbody').empty();
        $('#tablaHorariosExportar thead').empty();
        $('#tablaHorariosExportar tbody').empty();
        
        let area = areaSelect.value;
        let persona = personaSelect.value;

        const Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno ',
            Parametro: `${persona}|${area}|${fechaInicialGeneral}|${fechaFinalGeneral}`,
            Indice: 10
        }
        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsoncuerpo = Datos['dt0'];
                let jsoncabecera = Datos['dt1'];
                let strCabecera = '';
                let strCuerpo = '';
                let strCabeceraExportar = '';
                let strCuerpoExportar = '';

                if (jsoncuerpo.length == 0) {
                    LimpiarTabla(2);
                    $('#iconCargar').css('display', 'none');
                    return;
                }

                //CABECERA ===========================================================================
                strCabecera = `<tr>
                                <th style="text-align:center;width:30px">N°</th>
                                <th style="text-align:left;width:235px">PERSONA</th>
                                <th style="text-align:center;width:108px">AREA</th>`;
                var diasMes = new Date(parseInt(fechaInicialGeneral.slice(-4)),parseInt(fechaInicialGeneral.slice(3,5)), 0).getDate();
                var diaTabla = parseInt(fechaInicialGeneral.slice(0,2));
                jsoncabecera.map(function (data, i) {
                    strCabecera += `<th style="text-align:center; width:200px">${arrayDias[i].toUpperCase()} ${diaTabla}</th>`;
                    diaTabla++
                    if(diaTabla>diasMes) diaTabla = 1
                })
                strCabecera += `
                            <th style="text-align:center;white-space:nowrap;width:64px">HORAS</th>
                            <th style="text-align:center;white-space:nowrap;width:41px"></th>
                        </tr>`;

                //Exportar
                strCabeceraExportar = `<tr>
                                <th style="text-align:center;width:50px">N°</th>
                                <th style="text-align:left">PERSONA</th>
                                <th style="text-align:left">F. HORARIO</th>
                                <th style="text-align:center;white-space:nowrap">TIPO HORARIO</th>
                                <th style="text-align:center">AREA</th>`;

                jsoncabecera.map(function (data, i) {
                    strCabeceraExportar += `<th style="text-align:center">${arrayDias[i].toUpperCase()}</th>`;
                })
                strCabeceraExportar += `
                                <th style="text-align:center;white-space:nowrap">CANT. HORAS</th>
                                
                            </tr>`;

                $('#tablaHorariosLista thead').append(strCabecera);

                $('#tablaHorariosExportar thead').append(strCabeceraExportar);
                //CUERPO =================================================================================
                jsoncuerpo.map(function (datacuerpo, i) {
                    let identificadorDeDia = 0;
                    let objCuerpo = datacuerpo;
                    strCuerpo += `<tr onclick="PintarTr($(this))" class="option colorear" data-nompersona="${datacuerpo.NomPersona}" data-codhorario="${datacuerpo.CodHorario}" data-codpersona="${datacuerpo.CodPersona}"
                                    data-tipohorario="${datacuerpo.CodHorarioTipo}"
                                    data-fechahorario="${datacuerpo.FechaHorario}" data-cantidadhoras="${datacuerpo.CantidadHorasSemanal}"
                                    data-lunes="${datacuerpo.Lunes}" data-martes="${datacuerpo.Martes}"
                                    data-miercoles="${datacuerpo.Miércoles}" data-jueves="${datacuerpo.Jueves}"
                                    data-viernes="${datacuerpo.Viernes}" data-sabado="${datacuerpo.Sábado}"
                                    data-domingo="${datacuerpo.Domingo}" >
                                    
                                    <td style="text-align:center;vertical-align:middle">${i + 1}</td>
                                    <td style="text-align:left;vertical-align:middle;word-break:break-word">${datacuerpo.NomPersona}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomArea}</td>`;

                    jsoncabecera.map(function (datacabecera, y) {
                        let HoraExtra = objCuerpo[datacabecera.Dia]?.split("|")[7].split('~')[0] == '' ? 0 : objCuerpo[datacabecera.Dia]?.split("|")[7].split('~')[0]
                        let tieneDescanso = ((objCuerpo[datacabecera.Dia]?.split("|")[6]).trim().length == 0 ? true : false)
                        strCuerpo +=    `<td data-tien-hExtra=${tieneDescanso} style="word-break:break-word;text-align:center;vertical-align:middle" data-nompersona="${datacuerpo.NomPersona}" data-numerodia="${identificadorDeDia}" data-codturno="${objCuerpo[datacabecera.Dia].split('|')[0]}" data-dia="${datacabecera.Dia}" data-codpersona="${objCuerpo.CodPersona}" data-codhorario="${objCuerpo.CodHorario}" data-horainicio="${objCuerpo[datacabecera.Dia].split("|")[2].split("-")[0]}" data-horafin = "${objCuerpo[datacabecera.Dia].split("|")[2].split("-")[1]}" data-duracion="${objCuerpo[datacabecera.Dia].split("|")[6]}" data-codempresa="${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[0]}" data-codruta="${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[2]}" data-destino="${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[4]}" data-horariodetalle="${objCuerpo[datacabecera.Dia].split("|")[5]}"> 
                                            <div style="text-align:center">
                                                <b style="font-size:18px;text-align:center"> ${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '' : '' + objCuerpo[datacabecera.Dia].split("|")[2]} 
                                                <span title="Editar Programación" class="detalleProgramacion" onclick="abrirModalHorariosYHorasExtras(${HoraExtra},$(this).parent().parent().parent(),${tieneDescanso},${objCuerpo[datacabecera.Dia].split("|")[5]});" style="color:#00ACDF;font-size:22px;cursor:pointer;" aria-hidden="true"><i class="fa fa-bars" style="font-size:12px;vertical-align: middle;color:${HoraExtra == 1 ? '#e59400' : '#3286ecb5'}" aria-hidden="true"></i></span></b>
                                            </div>
                                            <div style="text-align:center">
                                                ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[1]} </i></br>
                                                ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[4]}  
                                                ${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '' : '<i class="fa fa-map-marker" style="color:#EE3103" aria-hidden="true"></i>'}
                                            </div>
                                        </td >`;
                                identificadorDeDia++    //identificador para saber que dia es=> LUNES 0 - DOMINGO 6
                    })

                    strCuerpo += `  
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.CantidadHorasSemanal == null ? '' : datacuerpo.CantidadHorasSemanal}</td>
                                    <td style="vertical-align:middle;text-align:center;white-space:nowrap"><button title="Anular Horario" class="btn btn-danger btn-xs info tooltipstered" onclick="AnularHorario($(this).parent().parent());" style="height: 23px;"><span class="glyphicon glyphicon-trash"></span></button></td>
                                </tr>`;
                })

                //EXPORTAR
                jsoncuerpo.map(function (datacuerpo, i) {
                    let objCuerpo = datacuerpo;

                    strCuerpoExportar += `<tr style="" data-nompersona="${datacuerpo.NomPersona}" data-codhorario="${datacuerpo.CodHorario}" data-codpersona="${datacuerpo.CodPersona}"
                                     data-tipohorario="${datacuerpo.CodHorarioTipo}"
                                    data-fechahorario="${datacuerpo.FechaHorario}" data-cantidadhoras="${datacuerpo.CantidadHorasSemanal}"
                                    data-lunes="${datacuerpo.Lunes}" data-martes="${datacuerpo.Martes}"
                                    data-miercoles="${datacuerpo.Miércoles}" data-jueves="${datacuerpo.Jueves}"
                                    data-viernes="${datacuerpo.Viernes}" data-sabado="${datacuerpo.Sábado}"
                                    data-domingo="${datacuerpo.Domingo}" >
                                    <td style="text-align:center;vertical-align:middle">${i + 1}</td>
                                    <td style="text-align:left;vertical-align:middle;white-space:nowrap">${datacuerpo.NomPersona}</td>
                                    <td style="text-align:center;vertical-align:middle;white-space:nowrap">${datacuerpo.FechaHorario}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomHorarioTipo}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomArea}</td>`;

                    jsoncabecera.map(function (datacabecera, y) {
                        strCuerpoExportar += `<td style = "text-align:center;white-space:nowrap;vertical-align:middle" >
                        						<b>${objCuerpo[datacabecera.Dia].split("|")[1]}</b><br>
												<b>${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[1]} ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[3]}</b><br>
                                                <b>${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '-' : '' + objCuerpo[datacabecera.Dia].split("|")[2]}<b><br>
                                                ${objCuerpo[datacabecera.Dia]?.split("|")[7].split('~')[1]}</td>`;
                    })

                    strCuerpoExportar +=    `
                                                <td style="text-align:center;vertical-align:middle">${datacuerpo.CantidadHorasSemanal == null ? '' : datacuerpo.CantidadHorasSemanal}</td>
                                            </tr>`;
                })


                $('#tablaHorariosLista tbody').append(strCuerpo);
                $('#tablaHorariosExportar tbody').append(strCuerpoExportar);

                //CUERPO =================================================================================
                $('#iconCargar').css('display', 'none');
            })
    }

    async function ListarPersonasHorarios() {
        let area = areaSelect.value;
        let persona = personaSelect.value;

        let tipohorario = selectTipoHorario.value; //tipoHorarioV2 != 1 ? tipoHorarioV2 :

        Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: `${area}|${persona}|${tipohorario}|${fechaInicialGeneral}|${fechaFinalGeneral}`,
            Indice: 11
        }
        const res = await fetch(UrlGeneral, DataFetch(Data, 'POST'))
        const Datos = res.json()
        return Datos;
    }

    async function verificarVistaNuevoHorario(){
        let tipoHorario = selectTipoHorario.value
        let obtenerHoras = ultimaProgramacionSelect.value
        if(obtenerHoras == 0){
            tipoHorario == 1 ? nuevaHorario(1) : nuevaHorario(2)
        }else{
            obtenerUltimaProgramcion()
        }
    }

    async function nuevaHorario(Tipo,tr) {
        $('#tablaHorarios thead').empty();
        $('#tablaHorarios tbody').empty();
        $('#tablaHorarios').css("display","");
        $('#tablaUltimoHorario').css("display","none");
        let Datos = '';
        let titulo = '';
        let codHorario = '';
        arrayMarcados = [];
        objMarcados = {};
        
        $("#selectUltimaProgramacion").val(0);
        let persona = personaSelect.value;
        let tipoHorario = $('#selectPersona option:selected')[0]['dataset']['tipohorario']; //tipo de horario cuando es una sola persona
        //le da el valor al select de tipo de horario y lo disablea
        if((tipoHorario == 1)||(tipoHorario == 2)){
            selectTipoHorario.value = tipoHorario;
            selectTipoHorario.setAttribute('disabled', true);
            $('#selectTipoHorario').select2();
        }

        if (Tipo == 1 || Tipo == 2) { // Registrar Nuevo horario
            //AGREGO LAS PERSONAS EN EL ARREGLO MARCADOS
            titulo = 'Nuevo Horario';
            Datos = await ListarPersonasHorarios();
            let jsondata = Datos['dt0'];
            jsondata.map(function (data, i) {
                if (data.CodPersona == 0) {
                    ObjUtil.MostrarMensaje(`${data.NomPersona}`, 0);
                    return;
                }

                objMarcados = {
                    id: data.CodPersona,
                    nombre: data.NomPersona
                }
                arrayMarcados.push(objMarcados);
            })
            
            //==================EDITAR HORARIO========================================
        } 
        // SI ES UNA SOLA PERSONA Y YA TIENE REGISTRADO HORARIO
        if (arrayMarcados.length == 0 && persona != 0) {
            ObjUtil.MostrarMensaje("La persona seleccionada ya tiene un horario registrado",0)
            return;
        }
        //====================================================

        let strCabecera = '';
        let strCuerpo = '';

        //ARMANDO CABECERA ===============================================

        strCabecera += `<tr>
                        <th style="text-align:center;vertical-align:middle;"><input title="Marcar/Desmarcar Todo" id="checkGeneralNuevoHorario" onchange="marcarCheckboxesNuevoHorario()" type="checkbox" style="cursor:pointer" checked></th>
                        <th style="text-align:center;border-right:2px solid #6098B9;white-space:nowrap">Personas | Días</th>`
		var diasMes = new Date(parseInt(fechaInicialGeneral.slice(-4)),parseInt(fechaInicialGeneral.slice(3,5)), 0).getDate();
        var numeroDia = parseInt(fechaInicialGeneral.slice(0,2));
        arrayDias.map(function (data, i) {
            strCabecera += `<th style="text-align:center"> ${data} ${numeroDia} </th>`
			numeroDia++
            if(numeroDia>diasMes) numeroDia = 1
        })

        strCabecera += `<th style="text-align:center;border-left:2px solid #6098B9;white-space:nowrap">Cantidad Horas</th>
                        <th style="text-align:center;border-left:2px solid #6098B9;white-space:nowrap"></th>
                        </tr>`;
        //FIN DE CABECERA ====================================================

        //ARMANDO CUERPO ==================================================
        if (arrayMarcados.length == 0) {
            strCuerpo += `<tr><td colspan="11" style="text-align:center">
                                No hay información que mostrar
                        </td></tr> `;
        } else {
            arrayMarcados.map(function (dataP, i) {
                strCuerpo +=    `<tr>
                                <td style="text-align:center;vertical-align:middle;"><input onclick="marcacionNuevoHorarioGeneral()" id="checkDePersona-${dataP.id}" type="checkbox" style="cursor:pointer" checked></td>
                                <td id="persona-${dataP.id}" style="text-align:center;border-right:2px solid #6098B9;white-space:nowrap;vertical-align:middle"> ${dataP.nombre} </td>`

                arrayDias.map(function (data, y) {
                    strCuerpo +=    `<td class="tdDays" data-dia="${data}" style="text-align:center">
                                        <select class="form-control selectsDays" id="select${y + 1}-${dataP.id}" data-parametros-empresa="" onchange="SumarHoras($(this))"></select>
                                    </td >`;
                })

                strCuerpo +=    `<td id="tdsumahoras-${dataP.id}" style="font-weight:bold;text-align:center;border-left:2px solid #6098B9;vertical-align:middle">00:00</td>
                                <td id="celdaVerificadora-${i}" style="vertical-align: middle">
                                    <i class="fas fa-building icon-build" title="Destinar Empresas" onclick="mostrarHorarioDetalle(this)"></i>
                                </td>
                                `

                strCuerpo += '</tr>';               
            })
        }        
        //FIN DE CUERPO ==========================================================

        $('#tablaHorarios thead').append(strCabecera);
        $('#tablaHorarios tbody').append(strCuerpo);

        //LLENANDO LOS SELECT
        const DatosTurnos = await ObtenerTurnos();
        const jsonTurnos = DatosTurnos['dt0'];
        let strCuerpoTurno = ''

        strCuerpoTurno += `<option style="text-align:center" value="0" >---</option>`;

        jsonTurnos.map(function (data, i) {
            strCuerpoTurno += ` <option style="text-align:center" value="${data.CodTurno}" data-horainicio="${data.HoraInicio}" data-horafinal="${data.HoraFin}" data-refrigerio="${data.DuracionRefrigerio}" data-nomTurno="${data.NomTurno}" data-cantidadhoras="${data.CantidadHoras}" title="${data.HoraInicio} - ${data.HoraFin} → ${data.CantidadHoras} horas">
                                    ${data.AbrevTurno}
                                </option>`;
        })

        arrayMarcados.map(function (dataP, i) {
            arrayDias.map(function (data, y) {
                $(`#select${y + 1}-${dataP.id}`).empty();
                $(`#select${y + 1}-${dataP.id}`).append(strCuerpoTurno);
            })
        })

        if (Tipo == 1) {
            modalNuevoHorario.dialog({
                title : titulo,
                height:  Datos['dt0'].length==1?400:700,
                buttons: {
                    "Guardar": () => {
                        RegistrarHorario(codHorario,Tipo);
                    },
                    "Cerrar": () => {
                        modalNuevoHorario.dialog('close');
                        LimpiarHorario();
                    }
                },
                close: () => {
                    LimpiarHorario();
                }
            })

            modalNuevoHorario.dialog("open");
            modalNuevoHorario[0].parentElement.childNodes[0].childNodes[0].innerText = `Nuevo Horario [ ${fechaInicialGeneral} - ${fechaFinalGeneral} ]`
        }
    }

    async function marcarCheckboxesNuevoHorario(){
        if(document.getElementById('checkGeneralNuevoHorario').checked == true){
            arrayMarcados.map(function(dataMarcados){
                document.getElementById(`checkDePersona-${dataMarcados.id}`).checked = true
            })
        }
        else{
            arrayMarcados.map(function(dataMarcados){
                document.getElementById(`checkDePersona-${dataMarcados.id}`).checked = false
            })
        }
    }

	async function marcacionNuevoHorarioGeneral(){
        let cantidadCheckboxes = arrayMarcados.length
        let contador = 0
        let checkGeneral = document.getElementById('checkGeneralNuevoHorario')
        arrayMarcados.map(function(dataMarcados){
            if(document.getElementById(`checkDePersona-${dataMarcados.id}`).checked == true){
                contador++
            }
        })
        if(contador == cantidadCheckboxes){
            checkGeneral.checked = true
        }else{
            checkGeneral.checked = false
        } 
    }
    function getDateOfWeek(week, year) {
        var primer = new Date(year, 0, 1 + (week - 1) * 7);
        var pDia = primer.getDay();
        var ISOweekStart = primer;
        if (pDia <= 4)
            ISOweekStart.setDate(primer.getDate() - primer.getDay() + 1);
        else
            ISOweekStart.setDate(primer.getDate() + 8 - primer.getDay());


        var ISOweekEnd = new Date(ISOweekStart.getTime() + 1000 * 60 * 60 * 24 * 6)
        return {
            FechaInicio: ISOweekStart.toLocaleDateString(),
            FechaFin: ISOweekEnd.toLocaleDateString(),
        }
    }

    async function obtenerUltimaProgramcion(){
        $('#tablaHorarios').css("display","");
        $('#tablaUltimoHorario').css("display","none");

        let valueOption = ultimaProgramacionSelect.value
        let nuevoformato = fechaInicialGeneral.split("/")[1] + '-' + fechaInicialGeneral.split("/")[0] + '-' + fechaInicialGeneral.split("/")[2]
        let FechaActual = new Date(nuevoformato);

        if(valueOption == 1){
            $('#tablaHorarios').css("display","none");
            $('#tablaUltimoHorario').css("display","");
            let semPasada = FechaActual.getTime() - ( 7 * 24 * 60 * 60 * 1000 );
            semPasada = new Date(semPasada)
            var jsonFechas = getDateOfWeek(numeroDeSemana(semPasada),semPasada.getFullYear())
            let area = areaSelect.value;
            let persona = personaSelect.value;
            let codTipoHorario = selectTipoHorario.value;

            const Data = {
                Procedimiento: "pna.ProcPersonaHorarioTurno",
                Parametro: `${persona}|${area}|${codTipoHorario}|${fechaInicialGeneral}|${fechaFinalGeneral}`,
                Indice: 50
            }
            const response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            var jsonData = response['dt0'];
            var jsonFechas = response['dt1'];
            $('#tablaUltimoHorario thead').empty();
            $('#tablaUltimoHorario tbody').empty();

            longPersonasUltPro = jsonData.length

            let strCabecera2 = `<tr>
                                <th style="vertical-align:middle;text-align:center;"><input title="Marcar/Desmarcar Todo" onclick="marcarCheckboxesUltimaProgramacion()" id="checkboxGeneralUltimaProgramacion" type="checkbox" style="cursor:pointer" checked></th>
                                <th style="text-align: center; border-right: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-right:#345e77;" data-darkreader-inline-border-right="">Personas | Días</th>`
            
            var diasMes = new Date(parseInt(fechaInicialGeneral.slice(-4)),parseInt(fechaInicialGeneral.slice(3,5)), 0).getDate();
            var numeroDia = parseInt(fechaInicialGeneral.slice(0,2));
            jsonFechas.map(function (data) {
                strCabecera2 += `<th style="text-align:center">${data.Dia} ${numeroDia}</th>`
                numeroDia++
                if(numeroDia>diasMes) numeroDia = 1
            })

            strCabecera2 += `<th style="text-align: center; border-left: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-left:#345e77;" data-darkreader-inline-border-left="">Cantidad Horas</th>
                            </tr>`

            $('#tablaUltimoHorario thead').append(strCabecera2);

            let strCuerpo2 = ''
            let parametrosUltimaProgramacio = ''
            jsonData.map(function (data, j) {
                strCuerpo2 += ` <tr id="ultimo-${data.CodPersona}">
                                    <td style="vertical-align:middle;text-align:center;"><input onclick="marcacionUltimaProgramacionGeneral()" id="checkPersonaUltProg-${j}" type="checkbox" style="cursor:pointer" checked></td>
                                    <td style="vertical-align:middle;text-align: center; border-right: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-right:#345e77;" data-darkreader-inline-border-right>${data.NomPersona}</td>`
                let horasTotales= 0
                let horarioDetalle = ''
                let concatFechas = ''
                jsonFechas.map(function(fecha, i) {
                    fechaDetalle = data[fecha.Dia]
                    concatFechas += (fechaDetalle.split('|')[0] != 0 ? '1*' : fechaDetalle.split('|')[0]?.trim()+'*')
                    const [hInicio ,horaFin] = fechaDetalle.split('|')[2].split('-')
                    horarioDetalle += fechaDetalle.split('|')[0]?.trim() + '#' + fechaDetalle.split('|')[4] + '#' + (hInicio ? hInicio.trim() : '') + '#' + (horaFin ? horaFin.trim() : '') + '#' + fechaDetalle.split('|')[6] + '~'
                    let hTotales = fechaDetalle.split('|')[3]
                    let empresa = fechaDetalle.split('|')[4].split('#')[1]
                    let refrigerio = fechaDetalle.split('|')[6]
                    horasTotales += convertirSegundos(hTotales == 0 ? '00:00' : hTotales)
                    if(hTotales!=0){
                        strCuerpo2 += `<td data-refrigerio="${refrigerio}"  style="text-align:center" class="${fecha.Dia}-${i}">
                                            <input type="time" class="h-incio" onChange="actualizarHoraDia($(this).parent())"style="margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? '' : hInicio?.trim()}"><br>
                                            <input type="time" class="h-fin" onChange="actualizarHoraDia($(this).parent())"style="margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? empresa : horaFin?.trim()}"><br>
                                            <input type="time" class="h-total" style="color:blue;margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? '' : hTotales}" disabled>
                                        </td>`
                    }else{
                        strCuerpo2 += `<td style="text-align:center; vertical-align: middle"><br>${empresa}<br><br></td>`
                    }
                    
                })
                fechaDetalle = data.CodPersona + '*' + data.FechaHorario.replace(' - ','*') + '*' + concatFechas + (data.HorarioFlexible ? 1 : 0) + '*' + ConvertirHora(horasTotales) + '*' + horarioDetalle.substr(0,horarioDetalle.length-1)
                fechaDetalle = data.CodPersona + '*' + fechaInicialGeneral + '*' + fechaFinalGeneral + '*' + concatFechas + (data.HorarioFlexible ? 1 : 0) + '*' + ConvertirHora(horasTotales) + '*' + horarioDetalle.substr(0,horarioDetalle.length-1)
                
                strCuerpo2 += `<td class="cantidad-horas" style="text-align: center;text-align:center;vertical-align:middle">${ConvertirHora(horasTotales)}</td>
                                </tr>`
                
                parametrosUltimaProgramacio += fechaDetalle + '^'

            })

            $('#tablaUltimoHorario tbody').append(strCuerpo2);
                parametroGnrlUProgramacion = parametrosUltimaProgramacio.substr(0,parametrosUltimaProgramacio.length - 1)
        }
    } 

    async function marcarCheckboxesUltimaProgramacion(){
        let valorChecked = document.getElementById('checkboxGeneralUltimaProgramacion').checked
        for(let i=0; i<longPersonasUltPro; i++){
            document.getElementById(`checkPersonaUltProg-${i}`).checked = valorChecked
        }
    }

    async function marcacionUltimaProgramacionGeneral(){
        let cantidadCheckboxes = longPersonasUltPro
        let contador = 0
        let checkGeneral = document.getElementById('checkboxGeneralUltimaProgramacion')
        for(let i=0; i<cantidadCheckboxes; i++){
            if(document.getElementById(`checkPersonaUltProg-${i}`).checked == true){
                contador++
            }
        }
        if(contador == cantidadCheckboxes){
            checkGeneral.checked = true
        }else{
            checkGeneral.checked = false
        } 
    }

    //EXCEDE UNA HORA POR EL REFRIGERIO
    function actualizarHoraDia(tr){
        let horaInicio = tr[0].querySelector('.h-incio').value;
        let horaFin = tr[0].querySelector('.h-fin').value;
        let refrigerio = tr[0].getAttribute('data-refrigerio')
        let horalTotalColumna = tr[0].querySelector('.h-total');

        horalTotalColumna.value = ConvertirHora(convertirSegundos(horaFin) - convertirSegundos(horaInicio) - convertirSegundos(refrigerio))
        actualizarHoraT(tr,tr.parent())
    }

    function actualizarHoraT(trhijo,tr) {
        let arrHtotales = tr[0].querySelectorAll('.h-total')
        let cantHoras = tr[0].querySelector('.cantidad-horas')
        let nuevaHtotal = 0

        arrHtotales.forEach((n)=>{
            nuevaHtotal += convertirSegundos(n.value == 0 ? '00:00' : n.value)
        })

        cantHoras.innerHTML = ConvertirHora(nuevaHtotal)
        actualizarParametros(trhijo,tr,ConvertirHora(nuevaHtotal))
    }

    function actualizarParametros(trhijo,tr,hrsSem) {
        let codPersona = tr[0].getAttribute('id').split('-')[1]
        let horaInicio = trhijo[0].querySelector('.h-incio').value;
        let horaFin = trhijo[0].querySelector('.h-fin').value;
        let horalTotalColumna = tr[0].querySelector('.h-total');
        
        let posDia = trhijo[0].getAttribute('class').split('-')[1] // 0 1 2 3 4 5 6

        let prmtroPersonas = parametroGnrlUProgramacion.split('^')

        prmtroPersonas.forEach((data,i) => {
            const arrDatos = data.split('*')
            if(arrDatos[0] == codPersona){
                const prmtroSmana = arrDatos[12].split('~')
                const prmtroDia = prmtroSmana[posDia].split('#')
                arrDatos[3+Number(posDia)] = (convertirSegundos(horalTotalColumna.value) == 0 ? '0' : '1') //actualizacion de dias 
                arrDatos[11] = hrsSem //actualizacion de horas totlaes por semana 


                prmtroDia[6] = horaInicio
                prmtroDia[7] = horaFin

                prmtroSmana[posDia] = concatenardatos(prmtroDia,'#')
                arrDatos[12] = concatenardatos(prmtroSmana,'~')
                data = concatenardatos(arrDatos,'*')

                // ejemplo base
                //384*16/01/2023*22/01/2023*1*1*1*1*1*1*1*0*57:00*
                //1#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#07:00#16:00#01:00~   ---> prmtroDias[0] --> prmtroDias[posDia]
                //1#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#07:00#16:00#01:00~   ---> 1
                //1#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#07:00#16:00#01:00~   ---> 2
                //2#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#08:30#17:30#01:00~   ---> 3
                //3#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#13:00#21:00#00:00~   ---> 4
                //3#4#Abexa Cloud Company Sac#1#Lineal#Los Olivos#13:00#21:00#00:00~   ---> 5
                //2#4#Abexa Cloud Company SAC#1#LINEAL#Los Olivos#08:30#17:30#00:00    ---> 6
                //nos ubicamos en donde se harán los cambios
            }
            prmtroPersonas[i] = data
        })
        parametroGnrlUProgramacion = concatenardatos(prmtroPersonas,'^')
    }

    function concatenardatos(arr,sep){
        let concat = ''
        arr.forEach(d => {
            concat += d + sep
        })
        
        return concat.substr(0,concat.length - 1)
    }

    //OBTERNER RUTAS
    async function obtenerRutas(cadenaConexion) {        
        const request = {
            Procedimiento: "ProcRutaV3", 
            Parametro: '', 
            Indice: 13,
            Cadena: cadenaConexion
        }

        const response = await fetch(urlBdParticular, DataFetch(request, 'POST')).then(res => res.json())
        const rutas = response['dt0']

        return rutas;
    }

    async function listarRutas(e,codigoRuta,codigoDestino){
        let cadenaConexion = (codigoRuta ? e : e[0]).options[(codigoRuta ? e : e[0]).selectedIndex].getAttribute('data-cadenaconexion');
        let selectRutas =  (codigoRuta ? e : e[0]).parentNode.parentNode.getElementsByClassName('select-rutas')[0]

        selectRutas.innerHTML = ''
        
        let arr = await obtenerRutas(cadenaConexion)
        let strRutas = ''

        arr.map(function (data, i) {
            strRutas += `<option value="${data.CodRuta}">${data.NomRuta}</option>`;
        })

        selectRutas.innerHTML = strRutas
        if(codigoRuta){
            selectRutas.value = codigoRuta
        }
            
        $('.select-rutas').select2()
        listarLugar(e,codigoDestino)
    }
    
    //OBTERNER LUGAR
    async function obtenerLugar(cadenaConexion,codRuta) {        
        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro: codRuta, 
            Indice: 51,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const lugar = response['dt0'];

        return lugar;
    }

    async function listarLugar(e,codigoDestino){
        let selectLugar = (codigoDestino ? e : e[0]).parentNode.parentNode.getElementsByClassName('select-origen-destino')[0]
        let elementoEmpresa = (codigoDestino ? e : e[0]).parentNode.parentNode.children[3].getElementsByClassName('select-empresas')[0]
        let codRuta = (codigoDestino ? e : e[0]).parentNode.parentNode.children[4].getElementsByClassName('select-rutas')[0].value
        let cadenaConexion = elementoEmpresa.options[elementoEmpresa.selectedIndex].getAttribute('data-cadenaconexion')
        
        let arrLugar = await obtenerLugar(cadenaConexion,codRuta)
        let strLugar = ''
        arrLugar.map(function (dt, i) {
            strLugar += `<option value="${dt.Destino}">${dt.Destino}</option>`;
        })

        selectLugar.innerHTML = strLugar
        if(codigoDestino){
            selectLugar.value = codigoDestino
        }
        $('.select-origen-destino').select2()
    }
    let totalDePersonasMarcados = 0
    async function mostrarHorarioDetalle(elemento) {
        const tr = elemento.parentNode.parentNode;
        const nombrePersonal = tr.children[1].textContent;
        const columnasDias = tr.querySelectorAll('.tdDays')
        let mostrarDialog = false;
        const bodyTHD = tablaHorarioDetalle.getElementsByTagName('tbody')[0];
        bodyTHD.innerHTML = ''
        let arrEmpresas = []
        arrEmpresas = await cargarComboEmpresasNuevoHorario()
        arrRutas = await obtenerRutas(arrEmpresas[0].CadenaConexion)
        let contadorDeDias = 0
        columnasDias.forEach((td, i) => {
            const selectDia = td.children[0];
            const seleccionoHorario = selectDia.value == 0 ? false : true;
            
            if (seleccionoHorario) {
                mostrarDialog = true

                const trTHD = document.createElement('tr');
                const optionSeleccionado = selectDia.options[selectDia.selectedIndex];
                const turnoAbrev = optionSeleccionado.textContent;
                const turno = optionSeleccionado.getAttribute('data-nomturno');
                const horario = optionSeleccionado.getAttribute('title');
                const dia = td.getAttribute('data-dia')
                const parametrosActuales = selectDia.getAttribute('data-parametros-empresa')
                const parametroEmpresaInicial = parametrosActuales == '' ? `${arrEmpresas[0].CodEmpresa}#${arrEmpresas[0].NomEmpresa}#${arrRutas[0].CodRuta}#${arrRutas[0].NomRuta}#${arrRutas[0].Destino}` : parametrosActuales
                const arrParametrosEmpresa = parametroEmpresaInicial.split('#')                

                trTHD.setAttribute('data-parametros-empresa', parametroEmpresaInicial)
                trTHD.setAttribute('select-afectado', selectDia.getAttribute('id'))

                //llenado de empresas
                trTHD.innerHTML = `
                    <td title="${turno}">${turnoAbrev}</td>
                    <td>${dia}</td>
                    <td>${horario.substring(0, 13)}</td>
                    <td>
                        <select id="selectEmpresas-${contadorDeDias}" onchange="listarRutas($(this)),setearEmpresas(${contadorDeDias})" class="select-buscador select-empresas" style="width: 200px">
                            ${
                                arrEmpresas.map(e => {
                                    return `<option data-cadenaconexion="${e.CadenaConexion}" value="${e.CodEmpresa}" ${arrParametrosEmpresa[0] == e.CodEmpresa ? 'selected' : ''}>${primeraLetraMayuscula(e.NomEmpresa)}</option>`
                                }).toString().replaceAll(',', '')
                            }
                        </select>
                    </td>
                    <td>
                        <select id="selectRutas-${contadorDeDias}" onchange="listarLugar($(this)),setearRutas(${contadorDeDias},this.value)" onclick="guardarValorAnterior(this.value)" class="select-buscador select-rutas" style="width: 100px">
                        </select>
                    </td>
                    <td>
                        <select id="selectDestino-${contadorDeDias}" onchange="setearDestino(${contadorDeDias})" class="select-buscador select-origen-destino" style="width: 200px">
                        </select>
                    </td>
                `
                if(parametrosActuales != ''){
                    listarRutas(trTHD.children[3].children[0],arrParametrosEmpresa[2],arrParametrosEmpresa[4])

                    $('.select-rutas').select2()
                    $('.select-origen-destino').select2()
                }
                const codEmpresa = trTHD.querySelector('.select-empresas').value;

                //llenado de rutas
                trTHD.querySelector('.select-rutas').innerHTML = `
                    ${
                        codEmpresa == 4
                        && '<option value="1">Lineal</option>'
                    }
                `

                const codRuta = trTHD.querySelector('.select-rutas').value;

                //llenado del lugar de origen se esta poniendo el lugar escribiendo de manera manual
                trTHD.querySelector('.select-origen-destino').innerHTML = `
                    ${
                        codEmpresa == 4 && '<option value="Los Olivos">Los Olivos</option>'
                    }
                `               
                
                //$(trTHD).on("change",".select-rutas", async (e) => accionesCombosEmpresas(e, false, true, false));
                //$(trTHD).on("change",".select-empresas", async (e) => listarLugar(e));
                //$(trTHD).on("change",".select-origen-destino", async (e) => accionesCombosEmpresas(e, false, false, true));

                bodyTHD.appendChild(trTHD)
                contadorDeDias++
            }
            totalDePersonasMarcados = contadorDeDias
        })
        
        if (!mostrarDialog) {
            ObjUtil.MostrarMensaje(`Debe seleccionar al menos un turno para ${nombrePersonal}`, 0)
            return
        }

        $('.select-buscador').select2()

        dialogHorarioDetalleJQ.dialog({
            title: `Seleccionar empresas para [${nombrePersonal}]`,
            buttons: [
                {
                    text: 'Guardar',
                    click: () => guardarEmpresasEnHorario(bodyTHD)
                },
                {
                    text: 'Cerrar',
                    click: () => dialogHorarioDetalleJQ.dialog('close')
                }
            ]
        })

        dialogHorarioDetalleJQ.dialog('open')
    }
    //funciones para setear options a los selects con un solo llamado a la base de datos
    async function llenarRutas(cadenaConexion){
        let arr = await obtenerRutas(cadenaConexion)
        for(let i=1; i<totalDePersonasMarcados; i++){
            document.getElementById(`selectRutas-${i}`).innerHTML=''
            let strRutas = ''
            arr.map(function (data) {
                strRutas += `<option value="${data.CodRuta}">${data.NomRuta}</option>`;
            })
            document.getElementById(`selectRutas-${i}`).innerHTML = strRutas
            $(`#selectRutas-${i}`).val(document.getElementById('selectRutas-0').value)
            $(`#selectRutas-${i}`).select2()
        }
        await llenarDestinos(cadenaConexion)
    }
    async function llenarDestinos(cadenaConexion){
        let arrLugar = await obtenerLugar(cadenaConexion,document.getElementById('selectRutas-0').value)
        for(let i=1; i<totalDePersonasMarcados; i++){
            document.getElementById(`selectDestino-${i}`).innerHTML=''
            let strLugar = ''
            arrLugar.map(function (dt) {
                strLugar += `<option value="${dt.Destino}">${dt.Destino}</option>`;
            })
            document.getElementById(`selectDestino-${i}`).innerHTML = strLugar
            $(`#selectDestino-${i}`).val(document.getElementById('selectDestino-0').value)
            $(`#selectDestino-${i}`).select2()
        }
    }
    //funciones para el cambio de los selects al cambio del primero
    async function setearEmpresas(contadorDeDias){
        if(contadorDeDias==0){
            let idSeleccionado = document.getElementById('selectEmpresas-0') 
            let valorSelectEmpresaInicial = idSeleccionado.value
            let cadenaConexion = idSeleccionado.options[idSeleccionado.selectedIndex].getAttribute('data-cadenaconexion')
            for(let i=1; i<totalDePersonasMarcados; i++){
                $(`#selectEmpresas-${i}`).val(valorSelectEmpresaInicial)
                $(`#selectEmpresas-${i}`).select2()
            }
            await llenarRutas(cadenaConexion)
        }
    }
    async function setearRutas(contadorDeDias,valorAnterior){
        console.log("valor anterior que se envia por la funcion on change: ",valorAnterior)
        if(contadorDeDias==0){
            let idSeleccionado = document.getElementById('selectEmpresas-0') 
            let cadenaConexion = idSeleccionado.options[idSeleccionado.selectedIndex].getAttribute('data-cadenaconexion')
            let valorSelectRutaInicial = document.getElementById('selectRutas-0').value
            for(let i=1; i<totalDePersonasMarcados; i++){
                $(`#selectRutas-${i}`).val(valorSelectRutaInicial)
                $(`#selectRutas-${i}`).select2()
            }
            await llenarDestinos(cadenaConexion)
        }
    }
    async function setearDestino(contadorDeDias){
        if(contadorDeDias==0){
            let valorSelectDestinoInicial = document.getElementById('selectDestino-0').value
            for(let i=1; i<totalDePersonasMarcados; i++){
                $(`#selectDestino-${i}`).val(valorSelectDestinoInicial)
                $(`#selectDestino-${i}`).select2()
            }
        }
    } 
    //***************************************************************
    //FUNCIONES DE PRUEBA
    async function guardarValorAnterior(valor){
        let valorAnteriordelSelect = document.getElementById('selectRutas-0').value
        console.log("valor anterior del select: ",valor)
    }
    //***************************************************************

    function accionesCombosEmpresas(e, esEmpresa, esRuta, esOrigenDestino) {        
        const trActual = (e.target || e).parentNode.parentNode;
        const esPrimerHijo = trActual == trActual.parentNode.children[0];

        const selectEmpresaActual = trActual.querySelector('.select-empresas')
        const selectRutaActual = trActual.querySelector('.select-rutas')
        const selectOrigenDestinoActual = trActual.querySelector('.select-origen-destino')

        const codEmpresaSeleccionada = selectEmpresaActual.value;
        const nomEmpresaSeleccionada = selectEmpresaActual.options[selectEmpresaActual.selectedIndex].textContent;

        const cambiarElementosRuta = (tr) => {
            tr.querySelector('.select-rutas').innerHTML = `
                ${
                    codEmpresaSeleccionada == 4
                    ? '<option value="1">Lineal</option>'
                    : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresaSeleccionada).map(r => {
                        return `<option value="${r.CodRuta}">${r.NomRuta}</option>`
                    }).toString().replaceAll(',', '')
                }
            `

            tr.querySelector('.select-rutas').selectedIndex = 0;
            $('.select-rutas').select2()
        }

        const cambiarElementoOrigenDestino = (tr) => {
            const codRutaSeleccionada = trActual.querySelector('.select-rutas').value;

            tr.querySelector('.select-origen-destino').innerHTML = `
                ${
                    codEmpresaSeleccionada == 4
                    ? '<option value="Los Olivos">Los Olivos</option>'
                    : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresaSeleccionada && ruta.CodRuta == codRutaSeleccionada).map(r => {
                        return `<option value="${r.Origen}">${primeraLetraMayuscula(r.Origen)}</option>
                                <option value="${r.Destino}">${primeraLetraMayuscula(r.Destino)}</option>`
                    }).toString().replaceAll(',', '')
                }
            `

            tr.querySelector('.select-origen-destino').selectedIndex = 0
            $('.select-origen-destino' ).select2()
        }

        if (esPrimerHijo) {
            const bodyTHD = trActual.parentNode;
            const chilNodesTHD = bodyTHD.childNodes;
            const elementoAfectar = esEmpresa ? '.select-empresas' : (esRuta ? '.select-rutas' : '.select-origen-destino')
            const valorActual = trActual.querySelector(elementoAfectar).value
            
            for(let i = 0; i < chilNodesTHD.length; i++) {
                if (esEmpresa) cambiarElementosRuta(chilNodesTHD[i])
                if (esEmpresa || esRuta) cambiarElementoOrigenDestino(chilNodesTHD[i])

                chilNodesTHD[i].querySelector(elementoAfectar).value = valorActual
                $(elementoAfectar).select2()

                const codRutaSeleccionada = selectRutaActual.value;
                const nomRutaSeleccionada = selectRutaActual.options[selectRutaActual.selectedIndex].textContent;
                const codOrigenDestinoSeleccionada = selectOrigenDestinoActual.value;

                const parametrosEmpresa = `${codEmpresaSeleccionada}#${nomEmpresaSeleccionada}#${codRutaSeleccionada}#${nomRutaSeleccionada}#${codOrigenDestinoSeleccionada}`;
                chilNodesTHD[i].setAttribute('data-parametros-empresa', parametrosEmpresa);
            }
        } else {
            if (esEmpresa) cambiarElementosRuta(trActual)
            if (esEmpresa || esRuta) cambiarElementoOrigenDestino(trActual)

            const codRutaSeleccionada = selectRutaActual.value;
            const nomRutaSeleccionada = selectRutaActual.options[selectRutaActual.selectedIndex].textContent;
            const codOrigenDestinoSeleccionada = selectOrigenDestinoActual.value;

            const parametrosEmpresa = `${codEmpresaSeleccionada}#${nomEmpresaSeleccionada}#${codRutaSeleccionada}#${nomRutaSeleccionada}#${codOrigenDestinoSeleccionada}`;
            trActual.setAttribute('data-parametros-empresa', parametrosEmpresa);
        }
    }

    function guardarEmpresasEnHorario(body) {
        const chilNodes = body.childNodes;
        
        for(let i = 0; i < chilNodes.length; i++) {
            const tr = chilNodes[i];
            let eEmpresa = tr.children[3].children[0]
            let codEmpresa = eEmpresa.value
            let nomEmpresa = eEmpresa.options[eEmpresa.selectedIndex].textContent

            let eRuta = tr.children[4].children[0]
            let codRuta = eRuta.value
            let nomRuta = eRuta.options[eRuta.selectedIndex].textContent
            
            let eDestino = tr.children[5].children[0]
            let codDestino = eDestino.value
            
            const selectAfectado = document.getElementById(tr.getAttribute('select-afectado'));
            const parametrosEmpresa =  `${codEmpresa}#${nomEmpresa}#${codRuta}#${nomRuta}#${codDestino}`;

            selectAfectado.setAttribute('data-parametros-empresa', parametrosEmpresa);
        }

        ObjUtil.MostrarMensaje('Se guardaron los lugares a los horarios establecidos', 1)
        dialogHorarioDetalleJQ.dialog('close')
    }

    //ELIGIENDO LOS DIAS DE LA SEMANA NO SELECCIONADOS PARA DISABLEARLOS LUEGO
    async function DiasDisabled() {
        arrayDiasDisabled = []
        let fechaInicio = fechaInicialGeneral
        let fechaFin = fechaFinalGeneral

        let diaInicio = moment(fechaInicio, "DD-MM-YYYY")
        let diaFin = moment(fechaFin, "DD-MM-YYYY")

        if (diaFin.weekday() >= diaInicio.weekday()) {
            for (let i = diaInicio.weekday(); i <= diaFin.weekday(); i++) {
                arrayDiasDisabled.push(i);
            }
        } else {
            for (let i = 0; i <= diaFin.weekday(); i++) {
                arrayDiasDisabled.push(i);
            }
            for (let i = diaInicio.weekday(); i <= 6; i++) {
                arrayDiasDisabled.push(i);
            }
        }

    }
    //==========================================================================

    async function RegistrarHorario(codHorario,Tipo) {
        if (arrayMarcados.length == 0) {
            ObjUtil.MostrarMensaje("No hay usuarios que registrar, pruebe con otro tipo de horario", 0);
            return;
        }

        let tipoHorario = selectTipoHorario.value;
        let fechaInicio = fechaInicialGeneral
        let fechaFin = fechaFinalGeneral
        let separacion = Tipo == 1 ? '*' : '|';
        let arrayValidador = [];
        let arrayValidadorHoras = [];

        //VALIDAR FECHAS=======================
        let fechaInicioStamp = ObjUtil.convertDateToTimeStamp(`${fechaInicio} 00:00:00`);
        let fechaFinStamp = ObjUtil.convertDateToTimeStamp(`${fechaFin} 00:00:00`);

        if (tipoHorario != 1) {
            if (fechaInicioStamp > fechaFinStamp) {
                ObjUtil.MostrarMensaje('La fecha inicio no puede ser mayor a la fecha fin', 0);
                return true;
            }
        }
        //=====================================

        let parametros = '';
        let parametrosDias = '';
        let parametrosTurnos = '';
        let detenerFuncionPorEmpresa = false;
        let mensaje = ""
        let validadorSemanaSinHorario = []
        let indicadorValidador = 0

        let validadorSeleccionEmpresas = true

        arrayMarcados.map(function (dataMarcados, i) { 

            let numeroDiasSinHorario = 0

            let valorValidador = 0;
            let cantidadHora = document.getElementById(`tdsumahoras-${dataMarcados.id}`).innerHTML;

            parametrosDias = '';
            parametrosTurnos = '';

            arrayDias.map(function (dataDias, y) {
                const selectDia = document.getElementById(`select${y + 1}-${dataMarcados.id}`)
                const optionSeleccionado = selectDia.options[selectDia.selectedIndex];
                const selectHoraInicio = optionSeleccionado.getAttribute('data-horainicio');
                const selectHoraFinal = optionSeleccionado.getAttribute('data-horafinal');
                const selectRefrigerio = optionSeleccionado.getAttribute('data-refrigerio');

                let turno = selectDia.value;
                const parametrosEmpresa = turno > 0 ? selectDia.getAttribute("data-parametros-empresa") +'#'+ selectHoraInicio +'#'+ selectHoraFinal +'#'+ selectRefrigerio : '0##0##'
                if (turno > 0 && parametrosEmpresa == "") {
                    mensaje = `Debe seleccionar los lugares de servicios para ${dataMarcados.nombre}`
                    detenerFuncionPorEmpresa = true
                }
                parametrosTurnos += `${turno}#${parametrosEmpresa}~`; 
                
                if((turno > 0)&&(selectDia.getAttribute("data-parametros-empresa")=="")){
                    validadorSeleccionEmpresas = false
                    //document.getElementById(`celdaVerificadora-${i}`).setAttribute('class','celdaSinDatos')
                    //document.getElementById(`celdaVerificadora-${i}`).removeAttribute('class')
                }

                if(turno==0){
                    numeroDiasSinHorario++
                }
                valorValidador = 1;
                turno>0? parametrosDias += `1${separacion}` : parametrosDias += `0${separacion}`;   //valida si existe un turno sino lo toma como descanso
            })

            parametrosDias = parametrosDias.substring(0, parametrosDias.length - 1);
            parametrosTurnos = parametrosTurnos.substring(0, parametrosTurnos.length - 1);
            
            //CONDICIONAL PARA QUE SOLO SE GUARDEN LAS PERSONAS QUE TENGAN CHECK
            if(document.getElementById(`checkDePersona-${dataMarcados.id}`).checked==true){
                parametros += `${Tipo == 1 ? dataMarcados.id : codHorario}${separacion}${fechaInicialGeneral}${separacion}${fechaFinalGeneral}${separacion}${parametrosDias}${separacion}${0}${separacion}${cantidadHora}${separacion}${parametrosTurnos}^`;    //se esta poniendo un cero en durito para que base de datos reciba como horario flexible
				//ALMACENA EN UN ARRAY LAS CANTIDADES DE DESCANSO QUE TIENE ESA SEMANA                
                validadorSemanaSinHorario[indicadorValidador] = numeroDiasSinHorario
                indicadorValidador++
            }

            ValidacionesHorarios(valorValidador, dataMarcados.nombre, dataMarcados.id);
            ValidacionesTotalHoras(cantidadHora, dataMarcados.nombre, dataMarcados.id);
            arrayValidador.push(valorValidador);
            arrayValidadorHoras.push(cantidadHora);
            if (detenerFuncionPorEmpresa) ObjUtil.MostrarMensaje(mensaje, 0);
        })

        if (detenerFuncionPorEmpresa) {
            return
        }

        let detenerFuncion = DetenerFuncionFuc(arrayValidador);
        if (detenerFuncion) {
            return;
        }

        let detenerFuncionHoras = DetenerFuncionFucHoras(arrayValidadorHoras);
        if (detenerFuncionHoras) {
            return;
        }
        parametros = parametros.substring(0, parametros.length - 1);
        if(ultimaProgramacionSelect.value == 1){
            parametros="" 
            for(let i=0; i<longPersonasUltPro; i++){ 
                if(document.getElementById(`checkPersonaUltProg-${i}`).checked)    
                    parametros+=parametroGnrlUProgramacion.split('^')[i] + '^'
            }
            parametros = parametros.substring(0, parametros.length - 1);    
        }
        
		if(ultimaProgramacionSelect.value == 0){
            for(let i=0; i<indicadorValidador; i++){
                if(validadorSemanaSinHorario[i] == 7){
                    ObjUtil.MostrarMensaje("No se registró el horario semanal de una o mas personas",0)
                    return
                }
            }
        }

        if(parametros==""){
            ObjUtil.MostrarMensaje("Ninguna casilla esta marcada",0)
            return
        }

        if((validadorSeleccionEmpresas == false)&&(ultimaProgramacionSelect.value==0)){
            ObjUtil.MostrarMensaje("No se destinó empresas en algunos horarios",0)
            return
        }

        Data = {
        Procedimiento: 'pna.ProcPersonaHorarioTurno',
        Parametro: `${codUser}|${parametros}`,
        Indice: Tipo == 1 ? 20 : 30
        }

        fetch(UrlGeneral, DataFetch(Data,'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'][0];
                ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado)

                if (jsonData.CodResultado == 1) {
                    modalNuevoHorario.dialog('close');
					ListarHorarios();
                }
            })
    }

    function AnularHorario(tr) {
        let CodHorario = tr.attr('data-codhorario');
        let nomPersona = tr.attr('data-nompersona');

        $('#DivAnular').dialog({
            title : `Anular Horario de [ " ${nomPersona} " ]`,
            buttons: {
                'Si': function () {
                    Data = {
                                Procedimiento: 'pna.ProcPersonaHorarioTurno ',
                                Parametro: `${codUser}|${CodHorario}|${$('#txtAreaElimina').val()}`,
                                Indice: 40
                            }
                        fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
                        .then(Datos => {
                            let jsonData = Datos['dt0'][0];
                            ObjUtil.MostrarMensaje(jsonData.DesResultado, (jsonData.CodResultado == 1 ? 1 : 0));
                            if (jsonData.CodResultado == 1) {
                                $('#DivAnular').dialog('close');
                                ListarHorarios();
                            }       
                        })
                },
                'No': function () {
                    $('#txtAreaElimina').val("");
                    $(this).dialog('close');
                }
            },
            close: function () {
                $('#txtAreaAnular').val('');
            }
        })
        $('#DivAnular').dialog('open');
        $('#txtAreaElimina').val("");
    }

    function ValidacionesHorarios(valorValidador, persona, id) {
        if (valorValidador == 0) {
            ObjUtil.MostrarMensaje(`Debe digitar al menos un horario para ${persona}`, 0);
            document.getElementById(`persona-${id}`).style.color = 'red';
            return true;
        }
        return false;
    }

    function ValidacionesTotalHoras(cantidadHora, persona, id) {
        if (Number(cantidadHora.split(":")[0]) == 100 && Number(cantidadHora.split(":")[1]) > 0 || Number(cantidadHora.split(":")[0]) > 100) {
            ObjUtil.MostrarMensaje(`La hora maxima laboral de la ${persona} no debe ser mayor a 48:00 horas`, 0);
            document.getElementById(`persona-${id}`).style.color = 'blue';
            return;
        } 
        return false;
    }

    function DetenerFuncionFuc(array) {
        let variableRetornar = false;
        array.map(function (data, i) {
            if (data == 0) {
                variableRetornar = true;
            }
        })
        return variableRetornar;
    }

    function DetenerFuncionFucHoras(array) {
        let variableRetornar = false;
        array.map(function (data, i) {
            if (Number(data.split(":")[0]) == 300 && Number(data.split(":")[1]) > 0 || Number(data.split(":")[0]) > 300) {
                variableRetornar = true;
            }
        })
        return variableRetornar;
    }

    function ActivarDia(Dia, Posicion) {
        let CheckActivacion = document.getElementById(`checkActivacion${Posicion}`).checked ? 1 : 0;
        if (CheckActivacion == 1) {
            arrayMarcados.map(function (data, i) {
                document.getElementById(Dia + '' + (i + 1)).removeAttribute('readonly', 'readonly');
                document.getElementById(`b${Dia}${i + 1}`).removeAttribute('disabled');
            })
        } else {
            arrayMarcados.map(function (data, i) {
                document.getElementById(`${Dia}${i + 1}`).value = '';
                document.getElementById(Dia + '' + (i + 1)).setAttribute('readonly', 'readonly');
                document.getElementById(`b${Dia}${i+1}`).setAttribute('disabled',true);
            })
        }
    }

    function VerificarHora(element, event) {
        let inputSeleccionado = element[0].id;
        var valorInput = element[0].value;
        if (valorInput.length == 1 && valorInput > 2) {
            valorInput = '0' + valorInput;
        }
        if (valorInput.length == 2 && event.keyCode == 8) {

            valorInput = valorInput.split("")[0];
            element[0].value = valorInput;
        }
        if (valorInput.length == 2 && event.keyCode != 8) {
            if (valorInput > 23) {
                valorInput = 23;
            }
            valorInput = valorInput + ':';
            element[0].value = valorInput;
        }
        if (valorInput.length == 4 && valorInput.split(":")[1] > 5) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
        if (valorInput.length == 5 && valorInput.split(":")[1] > 59) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
    }

    async function ObtenerAreas() {
        $('#selectArea').empty();
        Data = {
            Procedimiento: 'ProcGeneral',
            Parametro: '',
            Indice: 3
        }

        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {

                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                strCuerpo += '<option value="0">--TODOS--</option>';
                jsonData.map(function (data, i) {
                    strCuerpo += '<option  data-cadenaConexion="" value="' + data.CodArea + '">' + data.NomArea + '</option>';
                })

                $('#selectArea').append(strCuerpo);
            })
    }

    //SELECTS PARA EL EDITADO 
    async function cargarComboEmpresas() {
        $('#selectEmpresa').empty();
        const Data = {
            Procedimiento: 'dbo.ProcEmpresaV2',
            Parametro: '',
            Indice: 13
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(Data, 'POST')).then(res => res.json());
        const jsonData = response['dt0'];

        let strCuerpo = ''
        jsonData.map(function (data, i) {
            strCuerpo += `<option data-cadenaconexion="${data.CadenaConexion}" value="${data.CodEmpresa}">${data.NomEmpresa} </option>`;
        })
        $('#selectEmpresa').append(strCuerpo);
    }

    async function cargarComboEmpresasHorasExtras(){
        $('#selectEmpresa2').empty();
        const Data = {
            Procedimiento: 'dbo.ProcEmpresaV2',
            Parametro: '',
            Indice: 13
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(Data, 'POST')).then(res => res.json());
        const jsonData = response['dt0'];

        let strCuerpo = ''
        jsonData.map(function (data, i) {
            strCuerpo += `<option data-cadenaconexion="${data.CadenaConexion}" value="${data.CodEmpresa}">${data.NomEmpresa} </option>`;
        })
        $('#selectEmpresa2').append(strCuerpo);
    }

    async function cargarComboEmpresasNuevoHorario(){
        const Data = {
            Procedimiento: 'dbo.ProcEmpresaV2',
            Parametro: '',
            Indice: 13
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(Data, 'POST')).then(res => res.json());
        const jsonData = response['dt0'];
        return jsonData
    }

    async function cargarComboRutasEditado() {
        var cadenaConexion = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].getAttribute('data-cadenaconexion');
        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro:'', 
            Indice: 13,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrRuta = response['dt0'];
        let option = '';
        arrRuta.forEach((ruta) => {
            option += `<option value="${ruta.CodRuta}">${ruta.NomRuta}</option>`;
        })
        selectRutaEdit.innerHTML = option
    }

    async function cargarComboRutasHorasExtras() {
        var cadenaConexion = selectEmpresaHoraExtra.options[selectEmpresaHoraExtra.selectedIndex].getAttribute('data-cadenaconexion');
        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro:'', 
            Indice: 13,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrRuta = response['dt0'];
        let option = '';
        arrRuta.forEach((ruta) => {
            option += `<option value="${ruta.CodRuta}">${ruta.NomRuta}</option>`;
        })
        selectRutaHoraExtra.innerHTML = option
    }

    async function cargarComboDestinoEditado() {
        var cadenaConexion = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].getAttribute('data-cadenaconexion'); 
        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro: selectRutaEdit.value, 
            Indice: 51,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrDestino = response['dt0'];
        let option = '';
        arrDestino.forEach((dt) => {
            option += `<option value="${dt.Destino}">${dt.Destino}</option>`;
        })
        selectDestinoEdit.innerHTML = option
    }

    async function cargarComboDestinoHorasExtras() {
        var cadenaConexion = selectEmpresaHoraExtra.options[selectEmpresaHoraExtra.selectedIndex].getAttribute('data-cadenaconexion'); 
        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro: selectRutaEdit.value, 
            Indice: 51,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrDestino = response['dt0'];
        let option = '';
        arrDestino.forEach((dt) => {
            option += `<option value="${dt.Destino}">${dt.Destino}</option>`;
        })
        selectDestinoHoraExtra.innerHTML = option
    }

    function eventos(){
        $("#selectEmpresa").change(async function(){
            await cargarComboRutasEditado();
            await cargarComboDestinoEditado();
        })
        $("#selectRuta").change(async function(){
            await cargarComboDestinoEditado()
        })
    }
    function eventos2(){
        $("#selectEmpresa2").change(async function(){
            await cargarComboRutasHorasExtras();
            await cargarComboDestinoHorasExtras();
        })
        $("#selectRuta2").change(async function(){
            await cargarComboDestinoHorasExtras()
        })
    }

    async function ObtenerPersonas() {
        $('#selectPersona').empty();
        Data = {
            Procedimiento: 'ProcPersona',
            Parametro: `${areaSelect.value}`,
            Indice: 18
        }
        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                strCuerpo += '<option value="0">--TODOS--</option>';
                jsonData.map(function (data, i) {
                    strCuerpo += '<option value="' + data.CodPersona + '" data-tipohorario="'+ data.CodHorarioTipo +'" data-registrahorario="'+ data.RegistraHorario +'">' + data.NomPersona + '</option>';
                })

                $('#selectPersona').append(strCuerpo);
                $('#selectPersona').select2();
            })
    }

    const MostarTipoHorario = () => {
        Data = {
            Procedimiento: 'pna.ProcPersonaContrato',
            Parametro: '',
            Indice: 12
        }

        fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                jsonData.map(function (data, i) {
                    strCuerpo += '<option value="' + data.CodHorarioTipo + '">' + data.NomHorarioTipo + '</option>';
                })

                $('#selectTipoHorario').append(strCuerpo);
                //$('#selectTipoHorario').select2();
            })
    }

    async function ObtenerTurnos() {

        Data = {
            Procedimiento: 'pna.ProcTurno',
            Parametro: '',
            Indice: 10
        }

        const res = await fetch(UrlGeneral, DataFetch(Data, 'POST'))
        const Datos = res.json()
        return Datos;

    }

    function SumarHoras(element) {
        let sumaHoras = 0;
        let Horas = '';

        arrayDias.map(function (data, i) {
            let selectSelccionado = $(`#select${i+1}-${element[0].id.split("-")[1]} option:selected`).val();
            if (selectSelccionado == 0) {
                $(`#select${i+1}-${element[0].id.split("-")[1]}`).attr('data-parametros-empresa', '')
                Horas = '00:00';
            } else {
                Horas = $(`#select${i+1}-${element[0].id.split("-")[1]} option:selected`)[0]['dataset']['cantidadhoras'];
            }
            sumaHoras += convertirSegundos(Horas);
        })

        sumaHoras = ConvertirHora(sumaHoras);

        document.getElementById(`tdsumahoras-${element[0].id.split("-")[1]}`).innerHTML = sumaHoras;
        document.getElementById(`persona-${element[0].id.split("-")[1]}`).style.color = 'black';
    }

    function convertirSegundos(Horas){
        var horas = Horas.split(':')[0];
        var minutos = Horas.split(':')[1];

        horas = parseFloat(horas);
        minutos = parseFloat(minutos);


        var horas_Segundos = horas * 3600;
        var minutos_Segundos = minutos * 60;
        let segundos = minutos_Segundos + horas_Segundos;


        // 2:41:30
        return segundos;

    }

    function ConvertirHora(segundos) {
        var hours = Math.floor( segundos / 3600 );
        var minutes = Math.floor( (segundos % 3600) / 60 );

        //Anteponiendo un 0 a los minutos si son menos de 10
        minutes = minutes < 10 ? '0' + minutes : minutes;

        //Anteponiendo un 0 a los segundos si son menos de 10
        hours = hours < 10 ? '0' + hours : hours;

        var result = hours + ":" + minutes;
        return result;
    }

    function LimpiarTabla(Tipo) {
        $('#tablaHorariosLista thead').empty();
        $('#tablaHorariosLista tbody').empty();

        let strCabecera = '';
        let strCuerpo = '';

        strCabecera = `<tr>
                        <th style="text-align:center;width:50px">N°</th>
                        <th style="text-align:left">PERSONA</th>
                        <th style="text-align:center">ÁREA</th>
                        <th style="text-align:center">LUNES</th>
                        <th style="text-align:center">MARTES</th>
                        <th style="text-align:center">MIÉRCOLES</th>
                        <th style="text-align:center">JUEVES</th>
                        <th style="text-align:center">VIERNES</th>
                        <th style="text-align:center">SÁBADO</th>
                        <th style="text-align:center">DOMINGO</th>
                        <th style="text-align:center;white-space:nowrap">CANT. HORAS</th>
                        <th style="text-align:center;white-space:nowrap"></th>
                        <th style="text-align:center;white-space:nowrap"></th>
                    </tr>`;
        if (Tipo == 1) {
            strCuerpo += `<tr><td colspan="13" style="text-align:center">Presione el boton procesar</td><tr>`;
        } else {
            strCuerpo += `<tr><td colspan="13" style="text-align:center">No hay información que mostrar con los parametros seleccionados</td><tr>`;
        }


        $('#tablaHorariosLista thead').append(strCabecera);
        $('#tablaHorariosLista tbody').append(strCuerpo);
    }

    function exportaHorarios() {
        var opciones = {
            sistema: 'REPORTE DE HORARIOS',
            title: 'REPORTE DE HORARIOS',
            filename: 'REPORTE DE HORARIOS',
            empresa: nomEmpresa,
        }
        var parametros = {
            ruc: Ruc,
            nomUsuario: NomUsuario,
            fechaInicio: ObjUtil.ObtenerFechaActual(),
        }
        fnExcelReport("tablaHorariosExportar", opciones, parametros, "REPORTE DE HORARIOS");
    }

    function LimpiarHorario() {
        selectTipoHorario.value = 1;
        $('#selectTipoHorario').select2();
        selectTipoHorario.removeAttribute('disabled');
    }

    function cargarAnio(){
        $('#selectAnio').empty();
        var strHtml ="";
        for(var i=2019; i<=anioactual+1; i++){
            strHtml += `<option value="${i}">${i}</option>`
        }

        $('#selectAnio').append(strHtml);
        $('#selectAnio').select2();
    }

    function cargarSemana(){
        $('#selectSemana').empty();
        var strHtml ="";
        for(var i=1; i<=52; i++){
            strHtml += `<option value="${i}">${i}</option>`
        }

        $('#selectSemana').append(strHtml);
        $('#selectSemana').select2();
        
    }

    function calcularFecha(fechaInicialSemana,numeroDia){
        let fecha =""
        let cantidadDiasMes = new Date(parseInt(fechaInicialSemana.slice(-4)),parseInt(fechaInicialSemana.slice(3,5)), 0).getDate()
        let diaInicioSemana = parseInt(fechaInicialGeneral.slice(0,2))
        let mesInicioSemana = parseInt(fechaInicialGeneral.slice(3,5))
        let anioSemana = parseInt(fechaInicialGeneral.slice(6,10))
        let diaDeFechaRetornada = ""
        if((diaInicioSemana+parseInt(numeroDia))<=cantidadDiasMes){
            diaDeFechaRetornada = diaInicioSemana + parseInt(numeroDia) 
        }else{
            let diasSumados = cantidadDiasMes - diaInicioSemana
            diaDeFechaRetornada = parseInt(numeroDia) - diasSumados
            mesInicioSemana=((mesInicioSemana+1)<=12)?(mesInicioSemana+1):1
        }

        fecha=`${dosDigitos(diaDeFechaRetornada)}/${dosDigitos(mesInicioSemana)}/${anioSemana}`
        return fecha
    }

    function dosDigitos(numero){
        let numeroConDosDigitos = ""
        if(numero.toString().length==1){
            numeroConDosDigitos="0"+numero
        }else numeroConDosDigitos = numero
        return numeroConDosDigitos
    }
</script>