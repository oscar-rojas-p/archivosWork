@{
    ViewBag.Title = ViewBag.NomMenu;
    Layout = "~/Views/Shared/_LayoutBoletoElectronico.cshtml";
}

<link rel="stylesheet" href="~/Scripts/lib/tpicker.css@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))">
@* <link rel="stylesheet" href="~/Scripts/lib/tpicker.css@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))"> *@
<script type="text/javascript" src="~/Scripts/lib/tpicker.js@("?v="+ DateTime.Now.ToString("yyyyMMddhmmss"))"></script>

<script type="text/javascript" src="~/Scripts/MomentJS/moment.min.js"></script>
<script type="text/javascript" src="~/Scripts/MomentJS/es.js"></script>

<style>
    input: focus {
        background-color: yellow;
    }
    .botonNuevo {
        border-radius: 35px;
        text-align:center;
        box-shadow: 0 0 7px 0 rgb(193, 193, 193);       
    }
    .btn-circle.btn-xl {
        border-radius: 35px;
        margin-bottom: 5px;
    }
    .btn-circle {
        width: auto;
        height: 35px;
        padding: 6px 8px;
        border-radius: 15px;
        text-align: center;
        font-size: 14px;
        line-height: 1.42857;
    }


</style>

<style>
    body {
    font-family: 'Open Sans', sans-serif;
    }
    *,
    *::before,
    *::after {
    box-sizing: border-box;
    }
    .checkboxes {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    }
    .checkboxes__row {
    display: flex;
    }
    .checkboxes__row:not(:last-child) {
    border-bottom: 1px solid #eee;
    }
    .checkboxes__item {
    @* padding-right: 15px; *@
    @* width: 50%; *@
    }

    /* STYLE G */

    .checkbox.style-g {
    display: inline-block;
    position: relative;
    padding-right: 25px;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    }
    .checkbox.style-g input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
    }
    .checkbox.style-g input:checked ~ .checkbox__checkmark {
    background-color: #fff;
    }
    .checkbox.style-g input:checked ~ .checkbox__checkmark:after {
    opacity: 1;
    left: 8px;
    }
    .checkbox.style-g input:checked ~ .checkbox__body {
    font-weight: bold;
    }
    .checkbox.style-g:hover input ~ .checkbox__checkmark {
    background-color: #eee;
    }
    .checkbox.style-g:hover input:checked ~ .checkbox__checkmark {
    background-color: #eee;
    }
    .checkbox.style-g .checkbox__checkmark {
    position: absolute;
    top: 1px;
    right: 0;
    height: 22px;
    width: 22px;
    background-color: #eee;
    transition: background-color 0.25s ease;
    border-radius: 4px;
    }
    .checkbox.style-g .checkbox__checkmark:after {
    content: "";
    position: absolute;
    left: -20px;
    top: -8px;
    width: 15px;
    height: 25px;
    border: solid #0063D9;
    border-width: 0 4px 4px 0;
    transform: rotate(45deg);
    opacity: 0;
    transition: opacity 0.25s ease, left 0.25s ease;
    }
    .checkbox.style-g .checkbox__body {
    color: #333;
    line-height: 1.4;
    font-size: 16px;
    transition: font-weight 0.25s ease;
    }

    /* THANKS */
    .thanks {
    display: flex;
    justify-content: center;
    align-items: center;
    border-top: 1px solid #eee;
    margin-top: 60px;
    margin-bottom: 60px;
    padding-top: 60px;
    }
    .thanks > *:not(:last-child) {
    margin-right: 30px;
    }



</style>

<style>
    .NoRegistraHorario {
        color: #f00;
    }
    .RegistraHorario {
        color: #000000;
    }

    .icon-build {
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s;
        border: 3px solid #c7c7c7;
        border-style: outset;
        background: linear-gradient(315deg, #002052 0%,#7fa5a8 50%,#002052 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .icon-build:hover {
        transform: scale(1.4);
    }

    #tabla-horario-detalle > tbody > tr {
        height: 45px!important;
    }
    #tabla-horario-detalle > tbody > tr > td {
        vertical-align: middle;
    }

    .Excel {
        background-position: center;
        background-size: 34px 34px;
        background-repeat: no-repeat;
        background-image: url("https://img.icons8.com/color/117/000000/microsoft-excel-2019--v1.png");
    }
    .BIG:hover {
        /* border: 3px solid #bfbfbf; */
        transition: all 0.3s;
        background-size: 43px 43px;
        font-weight: 600;
        font-size: 15px;
    }
    .Excel:active {
        border: 2px solid black;
        background-position: center;
        background-size: 34px 34px;
        background-repeat: no-repeat;
        background-image: url("https://img.icons8.com/color-glass/480/000000/ms-excel.png");
    }
</style>

<style>
    input[type=time] {
        width: 100px;
        margin-left: 24px;
        margin-right: 30px
    }
</style>

<div id="divParametros" class="sombraFueraDeMapa">
    <div style="float:right; margin-top: 8px">
        <div id="divInputBusqueda">
            <input id="txtBuscar" type="text" placeholder="Búsqueda" autocomplete="off">
            <input type="text" placeholder="Búsqueda" style="display:none" autocomplete="off">
        </div>
        <div id="divBtnBuscar">
            <button id="btnBusquedaTabla" class="infoBusqueda tooltipstered">
                <i class="fa fa-search" aria-hidden="true"></i>
            </button>
        </div>
    </div>

    <div class="col-lg-12" style=" width: 346px; background-color: #5086c1;border-radius: 5px; height:60px; display: inline-block">
        <div style="text-align: center;">
            <div>
                <button id="btnSemanaAnterior" onclick="semanaAnterior();" style="background-color:#5086c1; margin-left: 0px;"><i class="fa fa-chevron-left" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
                <input type="text" value="Semana:" style="width: 81px; vertical-align:middle;" readonly="true">
                <select id="selectSemana" onchange="obtenerFechaManualmente()" style="width: 61px; height:28px !important ; vertical-align:middle;" name="Semana"></select>
                <select id="selectAnio" onchange="obtenerFechaManualmente()" style="width: 77px; height:28px !important ; vertical-align:middle;" name="Año"></select>
                <button id="btnSemanaSiguiente" onclick="semanaSiguiente();" style="background-color:#5086c1 ;"><i class="fa fa-chevron-right" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
            </div>
        </div>
        <div class="" style="text-align:center; margin-top:2px">
            <label id="fechaInicial" style="color: white;height: 20px;"> -/-/---- </label>
            <label style="color: white;margin-left:5px;margin-right:5px;font-size:15px" >  - </label>
            <label id="fechaFinal" style="color: white"> --/--/---- </label>
        </div>
    </div>
    
    <div style="float: left;" class="margenDivParametros">
        <i title="Areas" class="fa fa-institution info tooltipstered" aria-hidden="true" style="font-size: 18px; cursor: pointer; display: inline-block; margin-left: 10px;vertical-align: middle"></i>
        <select type="text" id="selectArea" onchange="ObtenerPersonas();" class="form-control" autocomplete="off" style="width:200px; height:28px !important; display: inline-block; vertical-align: middle"></select>
        <i title="Personas" class="fa fa-user info tooltipstered" aria-hidden="true" style="font-size: 18px; cursor: pointer; margin-left: 10px;display: inline-block; vertical-align: middle"></i>
        <select type="text" onchange="ListarHorarios();" id="selectPersona" class="form-control" autocomplete="off" style="width: 300px; height:28px !important;display: inline-block; vertical-align: middle"></select>
        <button title="Procesar" id="" type="button" onclick="ListarHorarios();" style="margin-left: 20px; margin-right: 8px; background-color: #3286ecb5; display: inline-block"><i id="iconCargar" class="fa fa-spinner fa-spin" style="display: none; color: #fff; font-size: 20px;margin-right:2px"></i><i class="fa fa-chevron-right" aria-hidden="true" style="font-size: 20px; color: white;"></i></button>
        <button id="Btnnuevo"  onclick="nuevaHorario(1);" type="button" class="btn btn-default btn-circle btn-xl botonNuevo" style="display: inline-block; vertical-align: middle" title="Registrar Nueva Actividad por Producto">
            <i class="fa fa-plus" style="color: #6da9f2;font-size:18px;"></i> 
            <span style="font-size: 14px; color: #808080cc; margin-left: 3px;">Nuevo</span>
        </button>   
        <button class="Excel BIG" title="Exportar a Excel" id="btnExport" onclick="exportaHorarios();" style="bottom: 8px;width: 42px; display: inline-block; margin-left: 10px; vertical-align: middle; margin-top: -7px;">
    </div>

    <div id="DivlblTitulo">
        <h2 id="lblTitulo" style="margin-top: 15px;">@ViewBag.NomMenu.Split('|')[0]</h2>
    </div>
</div>


<div id="DivDetalleProgramacion" style="display:none">
    <div class="content" style="padding:10px 0px">
        <div id="divTurnos" class="col-lg-12" style=" margin-top: -16px;">
            <div style="display:flex;padding: 15px 0px 10px 0px;" class="form-group">
                <label for="codturno">Turno</label>
                <select type="text" class="form-control" id="codturno"  style="margin-left:36px; margin-bottom: 2px;padding-bottom:5px;padding-top:5px;width:300px"> </select>
            </div>
        </div>
        <div class="col-lg-12" style="margin-bottom:10px;display:flex">
            <div style="display:flex" class="form-group">
                <label for="inputHoraInicio" title="Hora Inicio">H. Inicio</label>
                <input type="time" id="inputHoraInicio" maxlength="5" class="form-control" />
            </div>
            <div>
                <div style="display:flex" class="form-group">
                    <label for="inputHoraFin" title="Hora Fin">H. Fin</label>
                    <input type="time" id="inputHoraFin" maxlength="5" class="form-control" />
                </div>
            </div>
        </div>

        <div id="divHoraRefrigerio" class="col-lg-12" style="display:flex" class="form-group">
            <label for="inputDuracion" style="float: left; margin-left: -15px" class="col-sm-3" title="Hora refrigerio">H. R</label>
            <input type="time" style="max-width: 40%;margin-left: -5px; float: left;" id="inputDuracion"  maxlength="5" class="form-control col-sm-9" value="00:00"/>
        </div>

        <div class="col-lg-12" style="">
                <div style="display:flex;padding: 15px 0px 10px 0px;" class="form-group">
                    <label for="inputDescripcion">Empresa</label>
                    <select type="text" class="form-control" id="selectEmpresaModalDetalle"  style="margin-left:15px;padding-bottom:5px;padding-top:5px;width:300px"> </select>
                </div>
            <div>
                <div style="margin-right:50px ; padding-bottom:10px">
                    <div style="display:flex" class="form-group">
                        <label style="padding-top:5px"  for="inputDescripcion">Ruta</label>
                        <select type="text" class="form-control" id="selectRutaModalDetalle"  style="margin-left:50px;padding-bottom:5px;padding-top:5px;width:100px"> </select>
                    </div>
                </div>
                <div style="display:flex" class="form-group">
                    <label style="padding-top:5px" for="inputDescripcion">Lugar</label>
                    <select type="text" class="form-control" id="selectLugarModalDetalle"  style="margin-left:37px;padding-bottom:5px;padding-top:5px;width:auto;max-width:200px"> </select>
                </div>
            </div>
            <div id="divDescanso" style="margin-top:15px;display:flex">
                <label for="inputDescanso" title="Establecer Descanso" >Descanso</label>
                <input id="inputDescanso" style="margin-left:23px;margin-top:-7px" type="checkbox" onchange="verificarCheckDescanso(this.checked)">
            </div>
        </div>
    </div>
    <div class="timepicker"></div>
</div>

<div id="DivHorasExtras" style="display:none">
    <div class="content" style="padding:10px 0px">
        <div class="col-lg-12" style="margin-bottom:10px">
            <div class="col-lg-4">
                <div class="form-group">
                    <label for="inputHoraInicioHE">Hora Inicio</label>
                    <input id="inputHoraInicioHE" onblur="MostrarDato();" onkeyup="VerificarHora($(this),event,1)" onclick="showpickers('inputHoraInicioHE',24,$(this))" onfocus="MostrarDato();" onkeypress="return ObjUtil.SoloNumero(event, this);" maxlength="5" class="form-control" placeholder="HH:MM" />

                </div>
            </div>
            <div class="col-lg-4">
                <div class="form-group">
                    <label for="inputHoraFinHE">Hora Fin</label>
                    <input id="inputHoraFinHE" onblur="MostrarDato();" onkeyup="VerificarHora($(this),event,1)" onclick="showpickers('inputHoraFinHE',24,$(this))" onfocus="MostrarDato();" onkeypress="return ObjUtil.SoloNumero(event, this);" maxlength="5" class="form-control" placeholder="HH:MM" />
                </div>

            </div>
            <div >
                <div class="col-lg-12" style="margin-top:20px;">
                    <div class="checkboxes__item">
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Lunes</div></label>
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Martes</div></label>
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Miércoles</div></label>
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Jueves</div></label>
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Viernes</div></label>
                        <label class="checkbox style-g" style="margin-right:12px ;"><input type="checkbox" checked="checked"/><div class="checkbox__checkmark"></div><div class="checkbox__body">Sábado</div></label>
                        <label class="checkbox style-g"><input type="checkbox" /><div class="checkbox__checkmark"></div><div class="checkbox__body">Domingo</div></label>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="timepicker"></div>
</div>

<div id="DivRegistroHorario" style="display:none">
    <div class="content" style="padding:10px 0px;">
        <div class="col-sm-12" style="margin-bottom:10px">
            <div class="col-sm-4" style="margin-top:0.5%">
                <label class="col-sm-6" for="selectTipoHorario" style="vertical-align: middle">Tipo de Horario</label>
                <select class="col-sm-6" id="selectTipoHorario" onchange="nuevaHorario(2)" class="form-control" style="width:170px; vertical-align: middle; margin-top: -5px;">
                </select>
            </div>
            <div class="col-sm-4" style="margin-top:0.5%">
                <label class="col-sm-6" for="selectUltimaProgramacion" style="vertical-align: middle">Obtener Horas</label>
                <select class="col-sm-6" id="selectUltimaProgramacion" onChange="obtenerUltimaProgramcion();" class="form-control" style="width:170px; vertical-align: middle; margin-top: -5px;">
                    <option value="0"> Ninguno </option>
                    <option value="1"> Última Programación</option>
                </select>
            </div>
        </div>  
        <div class="col-lg-3 FechasHorario" style="margin-bottom:10px">
            <div class="col-lg-4" style="margin-top:0.5%">
                <label for="inputFechaInicio" style="white-space:nowrap;margin-top:7%">F. Inicio</label>
            </div>
            <div class="col-lg-8">
                <input id="inputFechaInicio" readonly class="form-control" style="width:80%;margin-left:5%;background:#fff" value="@DateTime.Now.ToString("dd/MM/yyyy")" />
                <i title="Fecha Inicio" class="fa fa-calendar tooltiplabel tooltipstered" aria-hidden="true" style="POSITION: absolute;TOP: 12%;left: 85%;font-size: 140%;"></i>
            </div>
        </div>
        <div class="col-lg-3 FechasHorario" style="margin-bottom:10px">
            <div class="col-lg-3" style="margin-top:0.5%">
                <label for="inputFechaFin" style="white-space:nowrap;margin-top:14%">F. Fin</label>
            </div>
            <div class="col-lg-8">
                <input id="inputFechaFin" readonly class="form-control" style="width:80%;margin-left:5%;background:#fff" value="@DateTime.Now.ToString("dd/MM/yyyy")" />
                <i title="Fecha Fin" class="fa fa-calendar tooltiplabel tooltipstered" aria-hidden="true" style="POSITION: absolute;TOP: 12%;left: 85%;font-size: 140%;"></i>
            </div>
        </div>
        <div class="col-lg-12" style="margin:25px 0px 10px 0px;height:100%">
            <div class="contenedor" style="margin:0px 0px;width:100%;height:95%">
                <table id="tablaHorarios" class="table table-bordered table-striped">
                    <thead></thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
                <table id="tablaUltimoHorario" style="display:none" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th style="text-align: center; border-right: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-right:#345e77;" data-darkreader-inline-border-right="">Personas | Días</th>
                            <th style="text-align:center">Lunes</th>
                            <th style="text-align:center">Martes</th>
                            <th style="text-align:center">Miercoles</th>
                            <th style="text-align:center">Jueves</th>
                            <th style="text-align:center">Viernes</th>
                            <th style="text-align:center">Sabado</th>
                            <th style="text-align:center">Domingo</th>
                            <th style="text-align: center; border-left: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-left:#345e77;" data-darkreader-inline-border-left="">Cantidad Horas</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>
        <div class="timepicker"></div>
    </div>
</div>

<div id="divTablas">
    <div class="" style="margin:25px 0px">
        <table id="tablaHorariosLista" class="table table-bordered table-striped ">
            <thead></thead>
            <tbody></tbody>
            <tfoot></tfoot>
        </table>
        <table id="tablaHorariosExportar" class="table table-bordred table-striped " style="display:none">
            <thead></thead>
            <tbody></tbody>
            <tfoot></tfoot>
        </table>
    </div>
</div>

<div id="dialog-horario-detalle">
    <table id="tabla-horario-detalle" class="table table-bordred table-striped ">
        <thead>
            <tr>
                <th>TURNO</th>
                <th>DIA</th>
                <th>HORARIO</th>
                <th>EMPRESA</th>
                <th>RUTA</th>
                <th>LUGAR</th>
            </tr>
        </thead>
        <tbody></tbody>
        <tfoot></tfoot>
    </table>
</div>

<div id="DivAnular" class="modal modal-fixed-footer ui-dialog-content ui-widget-content" style="display: none;">
    <div class="">
        <div class="form-horizontal margenTopParaModal" style="text-align: center;" role="form">
            <div>
                <img src="../Images/icoInterroga40x40.png">&nbsp;&nbsp;&nbsp;
                <span>Está seguro de realizar la operación?</span>
            </div>
            <p>Motivo:</p>
            <div>
                <textarea id="txtAreaElimina" style="width:100%;"></textarea>
            </div>  
        </div>
    </div>
</div>


<script>
    
    
    const arrayDias = ['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo'];
    let arrayMarcados = []; // { id: 1, nombre: 'Admin Admin, Admin' } ejemplo de como se llenara los datos
    let objMarcados = {};
    let arregloHorarios = [];
    let arrayDiasDisabled = [];
    const UrlGeneral = '@Url.Action("ProcGeneralPost", "GeneralPost")';
    const urlBDGeneralTGPS = '@Url.Action("ProcGeneralPostBDGeneral", "GeneralPost")';
    const urlBdParticular = '@Url.Action("ProcGeneralPostBDParticular", "GeneralPost")';

    let FechaActual = ObjUtil.ObtenerFechaActual();
    //variables
    let arrEmpresas = []
    let arrRutas = []
    const selectTipoHorario = document.getElementById('selectTipoHorario');
    const tablaHorarioDetalle = document.getElementById('tabla-horario-detalle');
    var fechaInicialGeneral = ""
    var fechaFinalGeneral = ""
    var anioactual = new Date().getFullYear()
    const dialogHorarioDetalleJQ = $('#dialog-horario-detalle')

    //VARIALBES EDITADO
    let selectEmpresaEdit = document.querySelector('#selectEmpresaModalDetalle')
    let selectRutaEdit = document.querySelector('#selectRutaModalDetalle')
    let selectDestinoEdit = document.querySelector('#selectLugarModalDetalle')
    let inputHInicio = document.getElementById('inputHoraInicio')
    let inputHFin = document.getElementById('inputHoraFin')



    const numeroDeSemana = fecha => {
            const DIA_EN_MILISEGUNDOS = 1000 * 60 * 60 * 24,
                DIAS_QUE_TIENE_UNA_SEMANA = 7,
                JUEVES = 4;
            fecha = new Date(Date.UTC(fecha.getFullYear(), fecha.getMonth(), fecha.getDate()));
            let diaDeLaSemana = fecha.getUTCDay(); // Domingo es 0, sábado es 6
            if (diaDeLaSemana === 0) {
                diaDeLaSemana = 7;
            }
            fecha.setUTCDate(fecha.getUTCDate() - diaDeLaSemana + JUEVES);
            const inicioDelAño = new Date(Date.UTC(fecha.getUTCFullYear(), 0, 1));
            const diferenciaDeFechasEnMilisegundos = fecha - inicioDelAño;
            return Math.ceil(((diferenciaDeFechasEnMilisegundos / DIA_EN_MILISEGUNDOS) + 1) / DIAS_QUE_TIENE_UNA_SEMANA);
    };

    let numeroDeSemanaActual = numeroDeSemana(new Date());

    async function obtenerFechaPorAnio(semana , anio) {
        const request = {
            Procedimiento: "pna.ProcPersonaHorarioTurno", 
            Parametro: `${semana}|${anio}`,
            Indice: 18
        }
        const response = await fetch(UrlGeneral, DataFetch(request, 'POST')).then(res => res.json())
        var jsonData = response['dt0'][0];
        fechaInicialGeneral = jsonData.FechaInicio
        fechaFinalGeneral = jsonData.FechaFin
        document.querySelector('#fechaInicial').innerText = jsonData.FechaInicio;
        document.querySelector('#fechaFinal').innerText = jsonData.FechaFin;
        
    }

    //funcion para modificar la fecha por anio con los select de la barra de busqueda
    async function obtenerFechaManualmente(){
        numeroDeSemanaActual = parseInt(document.querySelector('#selectSemana').value)
    	anioactual = parseInt(document.querySelector('#selectAnio').value)
        const request = {
            Procedimiento: "pna.ProcPersonaHorarioTurno", 
            Parametro: `${numeroDeSemanaActual}|${anioactual}`, 
            Indice: 18
        }
        const response = await fetch(UrlGeneral, DataFetch(request, 'POST')).then(res => res.json())
        var jsonData = response['dt0'][0];
        fechaInicialGeneral = jsonData.FechaInicio
        fechaFinalGeneral = jsonData.FechaFin
        document.querySelector('#fechaInicial').innerText = jsonData.FechaInicio;
        document.querySelector('#fechaFinal').innerText = jsonData.FechaFin;
        ListarHorarios()
    }

    document.addEventListener("DOMContentLoaded", async () => {
        @* cargarEstados(); *@
        ObjUtil.Modal($('#DivRegistroHorario'), '500', '1300px', true, false, false, true, 'Nuevo Horario');
        ObjUtil.Modal($('#DivAnular'), 'auto', '450px', true, false, false, true, 'Eliminar');
        ObjUtil.Modal($('#DivDetalleProgramacion'), 'auto', '500px', true, false, false, true, 'Detalle Programacion');
        ObjUtil.Modal($('#DivHorasExtras'), '300', '850px', true, false, false, true, 'Horas Extras');
    //    ObjUtil.Modal($('#DivDescansos'), '300', '850px', true, false, false, true, 'Descansos');

        ObjUtil.Modal(dialogHorarioDetalleJQ, 'auto', 'auto', true, false, false, true, 'Seleccionar Empresa');

        await cargarAnio();
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        await cargarSemana();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual)
        await eventos();
        await MostarTipoHorario();
        await ObtenerAreas();
        await ObtenerPersonas();
        await ListarHorarios();

        $('.FechasHorario').css('display', 'none');
        $('#inputFechaInicio').datepicker({
            dateFormat: 'dd/mm/yy',
            onSelect: function () {
                RangoFechaSemanalValidacion()
            }
        });
        $('#inputFechaFin').datepicker({
            dateFormat: 'dd/mm/yy',
            onSelect: function () {
                DiasDisabled()
            }
        });
        $.ui.dialog.prototype._allowInteraction = function (e) {
            return !!$(e.target).closest('.ui-dialog, .ui-datepicker, .select2-dropdown').length;
        };
        
        arrEmpresas = await obtenerEmpresas()
        arrRutas = await obtenerRutas()
        onKeyUpTextBuscar($('#tablaHorariosLista'))
    });
    
    async function semanaSiguiente(){
        if(numeroDeSemanaActual < 52){
            numeroDeSemanaActual += 1;
        }else{
            numeroDeSemanaActual = 1; 
            anioactual++
        }
        var today = new Date();
        var year = today.getFullYear();
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual)
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        ListarHorarios();
    }

    async function semanaAnterior(){
        if(numeroDeSemanaActual > 1){
            numeroDeSemanaActual -= 1;
        }else{
            numeroDeSemanaActual = 52;
            anioactual--;
        }
        $('#inputSemanaAnio').val('Semana N°'+ numeroDeSemanaActual);
        await obtenerFechaPorAnio(numeroDeSemanaActual,anioactual);
        $('#selectAnio').val(anioactual);
        $('#selectAnio').select2();
        $('#selectSemana').val(numeroDeSemanaActual);
        $('#selectSemana').select2();
        ListarHorarios();
    }

    async function verificarCheckDescanso(valueDelCheck){
        let checkDescanso = document.getElementById('inputDescanso');
        if(valueDelCheck==true){
            $("#codturno").attr("disabled",true)
            checkDescanso.checked=true;
            $('#inputHoraInicio').val("");
            $('#inputHoraFin').val("");
            $('#inputDuracion').val("");
            $("#codturno").val(0)
            $("#inputHoraInicio").attr("disabled",true)
            $("#inputHoraFin").attr("disabled",true)
            $("#inputDuracion").attr("disabled",true)
            $("#selectEmpresaModalDetalle").attr("disabled",true)
            $("#selectRutaModalDetalle").attr("disabled",true)
            $("#selectLugarModalDetalle").attr("disabled",true)
        }else{
            $("#codturno").attr("disabled",false)
            checkDescanso.checked=false;
            $("#inputHoraInicio").attr("disabled",false)
            $("#inputHoraFin").attr("disabled",false)
            $("#inputDuracion").attr("disabled",false)
            $("#selectEmpresaModalDetalle").attr("disabled",false)
            $("#selectRutaModalDetalle").attr("disabled",false)
            $("#selectLugarModalDetalle").attr("disabled",false)
        }
    }
    //funcion para registrar horas extras
    async function openModalHorasExtras(fila){
        
        let diaSemana = fila.attr('data-dia').trim()
        let codigo = fila.attr('data-codpersona')
        let codEmpresa = fila.attr('data-codempresa')
        let codTurno = fila.attr('data-codturno')
        $('#inputHoraInicio').val('')
        $('#inputHoraFin').val('')
        $('#inputHoraInicio').attr('disabled',false)
        $('#inputHoraFin').attr('disabled',false)
        $('#selectEmpresaModalDetalle').attr('disabled',false)
        $('#selectRutaModalDetalle').attr('disabled',false)
        $('#selectLugarModalDetalle').attr('disabled',false)
        $('#divTurnos').css('display','none')
        $('#divHoraRefrigerio').css('display','none')
        $('#divDescanso').css('display','none')
        await cargarComboEmpresas();
        selectEmpresaEdit.value = codEmpresa;
        await cargarComboRutasEditado()
        await cargarComboDestinoEditado()
        //proc para listar las horas extras en caso tenga
        const Data = {
            Procedimiento: 'pna.ProcSobretiempo',
            Parametro: `${fechaInicialGeneral}|${fechaFinalGeneral}|${diaSemana}|${codigo}`,
            Indice: 10
        }
        const response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
        const jsonData = response['dt0'][0]
        
        console.log(response['dt0'].length)
        if(response['dt0'].length!=0){
            console.log("entro al condicional, tiene hora extra programada")
            let inicioHoraExtra = jsonData.HoraInicioSobretiempo.slice(0,-3)
            let finHoraExtra = jsonData.HoraFinSobretiempo.slice(0,-3)
            $('#inputHoraInicio').val(inicioHoraExtra)
            $('#inputHoraFin').val(finHoraExtra)
            console.log("horas extras: ",inicioHoraExtra," ",finHoraExtra)
        }

        $('#DivDetalleProgramacion').dialog({
            title : "Registrar Horas Extras",
            buttons: {
                "Guardar": () => {
                    $('#divTurnos').css('display','')
                    $('#divHoraRefrigerio').css('display','')
                    $('#divDescanso').css('display','')
                    guardarHoraExtra(fila,codigo,codTurno)
                },
                "Cerrar": () => {
                    $('#divTurnos').css('display','')
                    $('#divHoraRefrigerio').css('display','')
                    $('#divDescanso').css('display','')
                    $('#DivDetalleProgramacion').dialog('close');
                }
            },
            close: () => {
                $('#divTurnos').css('display','')
                $('#divHoraRefrigerio').css('display','')
                $('#divDescanso').css('display','')
            }
        })

        $('#DivDetalleProgramacion').dialog("open")  
    }
    
    async function guardarHoraExtra(fila,codigo,codTurno){
        let numeroDiaSeleccionado = fila.attr('data-numerodia')
        let fechaseleccionada = calcularFecha(fechaInicialGeneral,numeroDiaSeleccionado)
        let horaInicioInput = document.getElementById('inputHoraInicio').value
        let horaFinInput = document.getElementById('inputHoraFin').value
        let nomEmpresa = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].text
        let nomRuta = selectRutaEdit.options[selectRutaEdit.selectedIndex].text
        //proc para guardar la hora extra
        const Data2 = {
            Procedimiento: 'pna.ProcSobretiempo',
            Parametro: `${codigo}|${codTurno}|${fechaseleccionada}|${horaInicioInput}|${horaFinInput}|${selectEmpresaEdit.value}|${nomEmpresa}|${selectRutaEdit.value}|${nomRuta}|${selectDestinoEdit.value}|${CodigoUsuario}`,
            Indice: 20
        }
        const response2 = await fetch(UrlGeneral, DataFetch(Data2,'POST')).then(res => res.json())
        console.log("resultado json: ",response2)
        const jsonData2 = response2['dt0'][0]
        
        ObjUtil.MostrarMensaje(jsonData2.DesResultado, jsonData2.CodResultado);

        $('#DivDetalleProgramacion').dialog("close")
        ListarHorarios()
    }

    async function openModalDetalleProgramacion(tr,codigo){
        let horaInicio= tr.attr('data-horainicio').trim();
        let horaFinal= tr.attr('data-horafin').trim();
        let codEmpresa= tr.attr('data-codempresa');
        let codHorarioDetalle= tr.attr('data-horariodetalle');
        let nomPersona= tr.parent()[0].getAttribute('data-nompersona');
        let duracion= tr.attr('data-duracion').trim();
        let codigoTurno=tr.attr('data-codturno').trim();
        console.log("codigo de turno recibido: ",codigoTurno)
        const DatosTurnos = await ObtenerTurnos();
        const jsonTurnos = DatosTurnos['dt0'];
        let strCuerpoTurno = ''
        strCuerpoTurno += `<option style="text-align:center" value="0" >---</option>`;
        jsonTurnos.map(function (data, i) {
            strCuerpoTurno += `<option style="text-align:center" value="${data.CodTurno}"
                                data-nomTurno="${data.NomTurno}" data-cantidadhoras="${data.CantidadHoras}"
                                title="${data.HoraInicio} - ${data.HoraFin}
                                    ${data.CantidadHoras} horas">
                                    ${data.AbrevTurno}
                                </option>`;
        })
        $("#codturno").append(strCuerpoTurno);

        if(codigo==undefined){
            $("#codturno").val(0)
            verificarCheckDescanso(true);
        }else{
            $('#inputHoraInicio').val(horaInicio);
            $('#inputHoraFin').val(horaFinal);
            $('#inputDuracion').val(duracion);
            $("#codturno").val(codigoTurno)
            verificarCheckDescanso(false);
        }
        await cargarComboEmpresas();
        if(codigoTurno!=0)selectEmpresaEdit.value = codEmpresa; //codEmpresa
        await cargarComboRutasEditado()
        await cargarComboDestinoEditado()
        document.querySelector('#codturno').addEventListener('change', function(){
            let nombreTurno = this.options[this.selectedIndex].text
            $('#inputHoraInicio').val(nombreTurno.slice(0,5));
            $('#inputHoraFin').val(nombreTurno.slice(8,13));
        })
        $('#DivDetalleProgramacion').dialog({
            title : codigo ? "Editar Programación [" + nomPersona + "]" :"Detalle Programación ",
            buttons: {
                "Guardar": () => {
                    let verificadorInternoCheckDescanso = document.getElementById("inputDescanso").checked
                    if(codigo!=undefined){
                        editarHorarioDetalle(codigo);
                    }else if((codigo==undefined)&&(verificadorInternoCheckDescanso==false)){
                        guardarCambioDescanso(tr)
                    }
                    else    $('#DivDetalleProgramacion').dialog("close")
                },
                "Cerrar": () => {
                    $('#DivDetalleProgramacion').dialog('close');
                }
            },
            close: () => {
            }
        })
        $('#DivDetalleProgramacion').dialog("open")  
    }

   

    async function editarHorarioDetalle(codHorarioDetalle){
        let valorCheckDescanso = document.getElementById("inputDescanso").checked
        let nomEmpresa = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].text
        let nomRuta = selectRutaEdit.options[selectRutaEdit.selectedIndex].text
        let codigoTurnoSeleccionado = document.getElementById("codturno").value

        parametros = `${codHorarioDetalle}|${selectEmpresaEdit.value}|${nomEmpresa}|${selectRutaEdit.value}|${nomRuta}|${selectDestinoEdit.value}|${codigoTurnoSeleccionado}|${inputHInicio.value}|${inputHFin.value}|${inputDuracion.value}|${valorCheckDescanso}` //0 es el valor de no descanso
        const Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: parametros,
            Indice: 31
        }
        const response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
        const jsonData = response['dt0'][0]

        ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado);
            
        if (jsonData.CodResultado == 1) {
            $('#DivDetalleProgramacion').dialog('close');
            ListarHorarios()
        }
    }

    //funcion para cambiar de descanso a horario normal
    async function guardarCambioDescanso(fila){
        let duracionRefrigerio = document.getElementById("inputDuracion").value
        let horaFin = document.getElementById("inputHoraFin").value
        let horaInicio = document.getElementById("inputHoraInicio").value
        let nomEmpresa = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].text
        let nomRuta = selectRutaEdit.options[selectRutaEdit.selectedIndex].text
        let codHorario = fila.attr('data-codhorario').trim()
        let dia = fila.attr('data-dia').trim()
        let codigoTurnoSeleccionado = document.getElementById("codturno").value
        
        const Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: `${codHorario}|${dia}|${codigoTurnoSeleccionado}|${selectEmpresaEdit.value}|${nomEmpresa}|${selectRutaEdit.value}|${nomRuta}|${selectDestinoEdit.value}|${horaInicio}|${horaFin}|${duracionRefrigerio}`,
            Indice: 22
        }

        const response = await fetch(UrlGeneral, DataFetch(Data,'POST')).then(res => res.json())
        const jsonData = response['dt0'][0]
        ObjUtil.MostrarMensaje(jsonData.DesResultado, jsonData.CodResultado);
        
        if (jsonData.CodResultado == 1) {
            $('#DivDetalleProgramacion').dialog('close');
            ListarHorarios()
        }
    }


    function VerificarHora(element, event, Tipo) {

        let inputSeleccionado = element[0].id;
        var valorInput = element[0].value;

        if (valorInput.length == 1 && valorInput > (Tipo == 1 ? 2:0)) {
           // valorInput = '0' + valorInput;
        }
        if (valorInput.length == 2 && event.keyCode == 8) {

            valorInput = valorInput.split("")[0];
            element[0].value = valorInput;
        }
        if (valorInput.length == 2 && event.keyCode != 8) {
            if (Tipo == 1) {
                if (valorInput > 23) {
                    valorInput = '23';
                }
            } else {
                // if (valorInput > 8) {
                //    valorInput = '08';
                //}
            }

            valorInput = valorInput + ':';
            element[0].value = valorInput;
        }
        if (valorInput.length == 4 && valorInput.split(":")[1] > 5) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
        if (valorInput.length == 5 && valorInput.split(":")[1] > 59) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }

        MostrarDato();
    }

    function MostrarDato() {

        let HoraInicio = document.getElementById("inputHoraInicio").value;
        let DuracionTotal = document.getElementById("inputDuracion").value;
        //convertDateToTimeStamp
        if (HoraInicio.length == 5) {

            let FechaHoraInicio = new Date(`04/07/2020 ${HoraInicio}:00`);

            document.getElementById("spanInicio").innerHTML  = HoraInicio;

            if (DuracionTotal.length == 5) {

                let FechaHoraDuracion = new Date(`01/01/1970 ${DuracionTotal}:00`);
                var c = (Number(FechaHoraInicio) + Number(FechaHoraDuracion) - FechaResta);
                let FechaHoraFin = new Date(c);
                let FechaFin = ObtenerFechaYHora(FechaHoraFin).split(" ")[0];
                let HoraFin = ObtenerFechaYHora(FechaHoraFin).split(" ")[1];

                document.getElementById("spanFin").innerHTML = HoraFin;
                document.getElementById("inputGuardadoFecha").value = FechaFin;
                ActivarRefrigerio(2);
            }
        }
    }


    async function ListarHorarios() { //Primer paso
        $('#iconCargar').css('display', '');
        $('#tablaHorariosLista thead').empty();
        $('#tablaHorariosLista tbody').empty();
        $('#tablaHorariosExportar thead').empty();
        $('#tablaHorariosExportar tbody').empty();

        let area = document.getElementById("selectArea").value;
        let persona = document.getElementById("selectPersona").value;

        const Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno ',
            Parametro: `${persona}|${area}|${fechaInicialGeneral}|${fechaFinalGeneral}`,
            Indice: 10
        }
        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsoncuerpo = Datos['dt0'];
                let jsoncabecera = Datos['dt1'];
                let strCabecera = '';
                let strCuerpo = '';
                let strCabeceraExportar = '';
                let strCuerpoExportar = '';

                if (jsoncuerpo.length == 0) {
                    LimpiarTabla(2);
                    $('#iconCargar').css('display', 'none');
                    return;
                }

                //CABECERA ===========================================================================
                                @* <th title="Fecha Horario" style="text-align:center;white-space:nowrap">F. HORARIO</th>
                                <th style="text-align:center;white-space:nowrap">TIPO HORARIO</th> *@
                strCabecera = `<tr>
                                <th style="text-align:center;width:50px">N°</th>
                                <th style="text-align:left">PERSONA</th>
                                <th style="text-align:center">AREA</th>`;
                var diasMes = new Date(parseInt(fechaInicialGeneral.slice(-4)),parseInt(fechaInicialGeneral.slice(3,5)), 0).getDate();
                var diaTabla = parseInt(fechaInicialGeneral.slice(0,2));
                jsoncabecera.map(function (data, i) {
                    strCabecera += `<th style="text-align:center">${arrayDias[i].toUpperCase()} ${diaTabla}</th>`;
                    diaTabla++
                    if(diaTabla>diasMes) diaTabla = 1
                })
                strCabecera += `
                                <th style="text-align:center;white-space:nowrap">CANT. HORAS</th>
                                <th style="text-align:center;white-space:nowrap"></th>
                            </tr>`;

                //Exportar
                strCabeceraExportar = `<tr>
                                <th style="text-align:center;width:50px">N°</th>
                                <th style="text-align:left">PERSONA</th>
                                <th style="text-align:left">F. HORARIO</th>
                                <th style="text-align:center;white-space:nowrap">TIPO HORARIO</th>
                                <th style="text-align:center">AREA</th>`;

                jsoncabecera.map(function (data, i) {
                    strCabeceraExportar += `<th style="text-align:center">${arrayDias[i].toUpperCase()}</th>`;
                })
                strCabeceraExportar += `
                                <th style="text-align:center;white-space:nowrap">CANT. HORAS</th>
                                
                            </tr>`;

                $('#tablaHorariosLista thead').append(strCabecera);

                $('#tablaHorariosExportar thead').append(strCabeceraExportar);
                //CABECERA ===========================================================================

                //CUERPO =================================================================================
                jsoncuerpo.map(function (datacuerpo, i) {
                    let identificadorDeDia = 0;
                    let objCuerpo = datacuerpo;
                    strCuerpo += `<tr onclick="PintarTr($(this))" class="option colorear" data-nompersona="${datacuerpo.NomPersona}" data-codhorario="${datacuerpo.CodHorario}" data-codpersona="${datacuerpo.CodPersona}"
                                    data-tipohorario="${datacuerpo.CodHorarioTipo}"
                                    data-fechahorario="${datacuerpo.FechaHorario}" data-cantidadhoras="${datacuerpo.CantidadHorasSemanal}"
                                    data-lunes="${datacuerpo.Lunes}" data-martes="${datacuerpo.Martes}"
                                    data-miercoles="${datacuerpo.Miércoles}" data-jueves="${datacuerpo.Jueves}"
                                    data-viernes="${datacuerpo.Viernes}" data-sabado="${datacuerpo.Sábado}"
                                    data-domingo="${datacuerpo.Domingo}" >
                                    
                                    <td style="text-align:center;vertical-align:middle">${i + 1}</td>
                                    <td style="text-align:left;vertical-align:middle;white-space:nowrap">${datacuerpo.NomPersona}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomArea}</td>`;
                    console.log("semana: ",objCuerpo)
                    jsoncabecera.map(function (datacabecera, y) {
                        strCuerpo +=    `<td data-numerodia="${identificadorDeDia}" data-codturno="${objCuerpo[datacabecera.Dia].slice(0,1)}" data-dia="${datacabecera.Dia}" data-codpersona="${objCuerpo.CodPersona}" data-codhorario="${objCuerpo.CodHorario}" data-horainicio="${objCuerpo[datacabecera.Dia].split("|")[2].split("-")[0]}" data-horafin = "${objCuerpo[datacabecera.Dia].split("|")[2].split("-")[1]}" data-duracion="${objCuerpo[datacabecera.Dia].split("|")[6]}" data-codempresa="${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[0]}" data-horariodetalle="${objCuerpo[datacabecera.Dia].split("|")[5]}" style = "text-align:center;white-space:nowrap;vertical-align:middle" > 
                                            <b style="font-size:18px;"> ${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '' : '' + objCuerpo[datacabecera.Dia].split("|")[2]} 
                                            <span class="detalleProgramacion" onclick="openModalDetalleProgramacion($(this).parent().parent(),${objCuerpo[datacabecera.Dia].split("|")[5]});" style="color:#00ACDF;font-size:22px;cursor:pointer;" aria-hidden="true">${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '...':'⁝'}</span></b>${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '' : `<button onclick="openModalHorasExtras($(this).parent())" style="float:right; margin-top:5px; height:21px; padding:0px 5px; background-color:#3286ecb5" type="button"><i class="fa fa-plus" style="color:white" aria-hidden="true"></i></button>`}<br>
                                            ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[1]} </i></br>
                                            ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[4]}  ${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '' : '<i class="fa fa-map-marker" style="color:#EE3103" aria-hidden="true"></i>'}
                                        </td >`;
                                identificadorDeDia++
                                console.log(datacabecera.Dia,": ", objCuerpo[datacabecera.Dia])
                                console.log(objCuerpo[datacabecera.Dia].split("|")[4])
                    })

                    strCuerpo += `  
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.CantidadHorasSemanal == null ? '' : datacuerpo.CantidadHorasSemanal}</td>
                                    <td style="vertical-align:middle;text-align:center;white-space:nowrap"><button title="Anular Horario" class="btn btn-danger btn-xs info tooltipstered" onclick="AnularHorario($(this).parent().parent());" style="height: 23px;"><span class="glyphicon glyphicon-trash"></span></button></td>
                                </tr>`;
                })

                //EXPORTAR
                jsoncuerpo.map(function (datacuerpo, i) {
                    let objCuerpo = datacuerpo;

                    strCuerpoExportar += `<tr style="" data-nompersona="${datacuerpo.NomPersona}" data-codhorario="${datacuerpo.CodHorario}" data-codpersona="${datacuerpo.CodPersona}"
                                     data-tipohorario="${datacuerpo.CodHorarioTipo}"
                                    data-fechahorario="${datacuerpo.FechaHorario}" data-cantidadhoras="${datacuerpo.CantidadHorasSemanal}"
                                    data-lunes="${datacuerpo.Lunes}" data-martes="${datacuerpo.Martes}"
                                    data-miercoles="${datacuerpo.Miércoles}" data-jueves="${datacuerpo.Jueves}"
                                    data-viernes="${datacuerpo.Viernes}" data-sabado="${datacuerpo.Sábado}"
                                    data-domingo="${datacuerpo.Domingo}" >
                                    <td style="text-align:center;vertical-align:middle">${i + 1}</td>
                                    <td style="text-align:left;vertical-align:middle;white-space:nowrap">${datacuerpo.NomPersona}</td>
                                    <td style="text-align:center;vertical-align:middle;white-space:nowrap">${datacuerpo.FechaHorario}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomHorarioTipo}</td>
                                    <td style="text-align:center;vertical-align:middle">${datacuerpo.NomArea}</td>`;

                    jsoncabecera.map(function (datacabecera, y) {
                        strCuerpoExportar += `<td style = "text-align:center;white-space:nowrap;vertical-align:middle" > <b>${objCuerpo[datacabecera.Dia].split("|")[1]}</b><br><b>${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[1]} ${objCuerpo[datacabecera.Dia].split("|")[4]?.split('#')[3]}</b><br> ${objCuerpo[datacabecera.Dia].split("|")[2] == 0 ? '-' : '' + objCuerpo[datacabecera.Dia].split("|")[2]}</td >`;
                    })

                    strCuerpoExportar +=    `
                                                <td style="text-align:center;vertical-align:middle">${datacuerpo.CantidadHorasSemanal == null ? '' : datacuerpo.CantidadHorasSemanal}</td>
                                            </tr>`;
                })


                $('#tablaHorariosLista tbody').append(strCuerpo);
                $('#tablaHorariosExportar tbody').append(strCuerpoExportar);

                //CUERPO =================================================================================
                $('#iconCargar').css('display', 'none');
            })
    }



    async function ListarPersonasHorarios() {
        let area = document.getElementById("selectArea").value;
        let persona = document.getElementById("selectPersona").value;

        let tipohorario = selectTipoHorario.value; //tipoHorarioV2 != 1 ? tipoHorarioV2 :

        if (persona == 0) {

            Data = {
                Procedimiento: 'pna.ProcPersonaHorarioTurno',
                Parametro: `${area}|${persona}|${tipohorario}`,
                Indice: 11
            }
            const res = await fetch(UrlGeneral, DataFetch(Data, 'POST'))
            const Datos = res.json()
            return Datos;

        } else {
            let nomPersona = $('#selectPersona option:selected')[0].text;
            let registraHorario = 0; // $('#selectPersona option:selected')[0]['dataset']['registrahorario'] == "true" ? 1 : 0;
            if (registraHorario == 1) {
                const Datos = {
                        "dt0": [{
                            CodPersona: 0,
                            NomPersona: `${nomPersona} ya tiene un horario asignado`,
                            Inidividual: undefined
                        }]
                    }

                return Datos;
            } else {
                const Datos = {
                    "dt0": [{
                        CodPersona: persona,
                        NomPersona: nomPersona,
                        Inidividual: 1
                    }]
                }
                return Datos;
            }
        }
    }


    function cargarComboRutas(cadenaConexion){
        dialogAprobado.dialog({
            title: 'Aprobar Incidencia',
            buttons: 
                {
                    'Aprobar':function(){
                        var CadenaConexion = tr.getAttribute('data-cadenaConexion');
                        let codIncidencia= tr.getAttribute('data-codIncidencia')
                        if(mensajeSolucion.val() ==''){
                            ObjUtil.MostrarMensaje('Debe agregar un comentario de Solución', 2);
                            return
                        }
                        const Data = {
                            Procedimiento: 'ProcIncidenciaEmpresa',
                            Parametro: codIncidencia +'|'+ codUser +'|'+mensajeSolucion.val(), 
                            Indice: 32,
                            Cadena: CadenaConexion
                        }
                        $.getJSON(urlBdParticular, Data, function (Datos) {
                            const jsonBody = Datos['dt0'];
                            ObjUtil.MostrarMensaje(jsonBody[0].DesResultado, jsonBody[0].CodResultado); 
                            procesar();
                        })
                        dialogAprobado.dialog('close');
                        limpiarTxtArea(mensajeSolucion)
                    },
                
                    "Cancelar":function(){
                        dialogAprobado.dialog('close')
                        limpiarTxtArea(mensajeSolucion)
                    }   
                },
                close: () => {
                    dialogAprobado.dialog('close')
                    limpiarTxtArea(mensajeSolucion)
                }
        })
        dialogAprobado.dialog('open');
    }



    async function nuevaHorario(Tipo,tr) {
        $('#tablaHorarios thead').empty();
        $('#tablaHorarios tbody').empty();
        $('#tablaHorarios').css("display","");
        $('#tablaUltimoHorario').css("display","none");
        let Datos = '';
        let titulo = '';
        let codHorario = '';
        arrayMarcados = [];
        objMarcados = {};
        
        $("#selectUltimaProgramacion").val(0);
        let persona = document.getElementById("selectPersona").value;
        let tipoHorario = $('#selectPersona option:selected')[0]['dataset']['tipohorario'];

        if (Tipo == 1 || Tipo == 2) { // Registrar Nuevo horario
            //AGREGO LAS PERSONAS EN EL ARREGLO MARCADOS
            console.log("TIPO ",Tipo)
            titulo = 'Nuevo Horario';
            Datos = await ListarPersonasHorarios();
            let jsondata = Datos['dt0'];
            jsondata.map(function (data, i) {
                if (data.CodPersona == 0) {
                    ObjUtil.MostrarMensaje(`${data.NomPersona}`, 0);
                    return;
                }
                if (data.Inidividual == 1) {
                    selectTipoHorario.value = tipoHorario;
                    selectTipoHorario.setAttribute('disabled', true);
                    $('#selectTipoHorario').select2();
                }

                objMarcados = {
                    id: data.CodPersona,
                    nombre: data.NomPersona
                }
                console.log(objMarcados)
                arrayMarcados.push(objMarcados);
            })
            
            //==================EDITAR HORARIO========================================
        } 
        else if (Tipo == 3) { //editar horario
            //AGREGO LAS PERSONAS EN EL ARREGLO MARCADOS
            codHorario = tr.attr('data-codhorario');
            let persona = tr.attr('data-nompersona');
            let codPersona = tr.attr('data-codpersona');
            let tipoHorario = tr.attr('data-tipohorario');
            let fechaInicio = tr.attr('data-fechahorario').split(" - ")[0] == null ? '' : tr.attr('data-fechahorario').split(" - ")[0]
            let fechaFin = tr.attr('data-fechahorario').split(" - ")[1] == null ? '' : tr.attr('data-fechahorario').split(" - ")[1]

            selectTipoHorario.value = tipoHorario;
            @* selectTipoHorario.setAttribute("disabled","disabled"); *@
            $('#selectTipoHorario').select2();
            document.getElementById("inputFechaInicio").value = fechaInicio;
            document.getElementById("inputFechaInicio").setAttribute("disabled", "disabled");
            document.getElementById("inputFechaFin").value = fechaFin;
            document.getElementById("inputFechaFin").setAttribute("disabled", "disabled");


            titulo = `Editar Horario [" ${persona} "]`
            objMarcados = {
                id: codPersona,
                nombre: persona
            }
            arrayMarcados.push(objMarcados);
            //==========================================================
        }

        // SI ES UNA SOLA PERSONA Y YA TIENE REGISTRADO HORARIO
        if (arrayMarcados.length == 0 && persona != 0) {
            return;
        }
        //====================================================

        let strCabecera = '';
        let strCuerpo = '';

        //ARMANDO CABECERA ===============================================

        strCabecera += '<tr>' +
                        '<th style="text-align:center;border-right:2px solid #6098B9;white-space:nowrap">Personas | Días</th>';

        arrayDias.map(function (data, i) {
            strCabecera += '<th style="text-align:center">' + data + '</th>';
        })

        strCabecera += `<th style="text-align:center;border-left:2px solid #6098B9;white-space:nowrap">Cantidad Horas</th>
                        <th style="text-align:center;border-left:2px solid #6098B9;white-space:nowrap"></th>
                        </tr>`;

        //FIN DE CABECERA ====================================================
        //ARMANDO CUERPO ==================================================
        if (arrayMarcados.length == 0) {
            strCuerpo += `<tr><td colspan="9" style="text-align:center">
                                No hay información que mostrar
                        </td></tr> `;
        } else {
            arrayMarcados.map(function (dataP, i) {
                strCuerpo += '<tr>' +
                    '<td id="persona-' + dataP.id + '" style="text-align:center;border-right:2px solid #6098B9;white-space:nowrap;vertical-align:middle">' + dataP.nombre + '</td>';

                arrayDias.map(function (data, y) {
                    strCuerpo += `<td class="tdDays" data-dia="${data}" style="text-align:center">
                                    <select class="form-control selectsDays" id="select${y + 1}-${dataP.id}" data-parametros-empresa="" onchange="SumarHoras($(this))"></select>
                                </td >`;
                })

                strCuerpo +=    `<td id="tdsumahoras-${dataP.id}" style="font-weight:bold;text-align:center;border-left:2px solid #6098B9;vertical-align:middle">00:00</td>
                                <td style="vertical-align: middle">
                                    <i class="fas fa-building icon-build" title="Destinar Empresas" onclick="mostrarHorarioDetalle(this)"></i>
                                </td>obtenerturnos
                                `

                strCuerpo += '</tr>';               
            })
        }        
        //FIN DE CUERPO ==========================================================

        $('#tablaHorarios thead').append(strCabecera);
        $('#tablaHorarios tbody').append(strCuerpo);

        //OCULTA LAS FECHAS SI SON DE TIPO REGULAR
        if (selectTipoHorario.value == 1) {
            $('.FechasHorario').css('display', 'none');
        } else {
            $('.FechasHorario').css('display', '');
            RangoFechaSemanalValidacion();
        }
        //=======================================================

        //LLENANDO LOS SELECT
        const DatosTurnos = await ObtenerTurnos();
        const jsonTurnos = DatosTurnos['dt0'];
        let strCuerpoTurno = ''

        strCuerpoTurno += `<option style="text-align:center${Tipo == 3 ? ';background:rgb(232, 232, 232)" ' : '"'} value="0" >---</option>`;

        jsonTurnos.map(function (data, i) {
            strCuerpoTurno += `<option style="text-align:center" value="${data.CodTurno}"
                                data-nomTurno="${data.NomTurno}" data-cantidadhoras="${data.CantidadHoras}"
                                title="${data.HoraInicio} - ${data.HoraFin}
                                    ${data.CantidadHoras} horas">
                                    ${data.AbrevTurno}
                                </option>`;
        })

        arrayMarcados.map(function (dataP, i) {
            arrayDias.map(function (data, y) {
                $(`#select${y + 1}-${dataP.id}`).empty();
                $(`#select${y + 1}-${dataP.id}`).append(strCuerpoTurno);
            })
        })
        //============================

            // DANDO VALORES A LOS SELECT SI SE EDITA
        if (Tipo == 3) { //editar
            let lunes = tr.attr("data-lunes");
            let martes = tr.attr("data-martes");
            let miercoles = tr.attr("data-miercoles");
            let jueves = tr.attr("data-jueves");
            let viernes = tr.attr("data-viernes");
            let sabado = tr.attr("data-sabado");
            let domingo = tr.attr("data-domingo");
            let cantidadhoras = tr.attr("data-cantidadhoras");
            let arrayValoresDias = []
            arrayValoresDias = [lunes, martes, miercoles, jueves, viernes, sabado, domingo];
            
            arrayMarcados.map(function (dataP, i) {
                arrayDias.map(function (data, y) {
                    console.log("array de dias: ",arrayValoresDias[y])
                    const selectDia = document.getElementById(`select${y + 1}-${dataP.id}`)
                    selectDia.value = Number(arrayValoresDias[y].split("|")[0]);
                    selectDia.setAttribute('data-parametros-empresa', arrayValoresDias[y].split("|")[4])
                    
                    if (Number(arrayValoresDias[y].split("|")[0] == 0)){
                        @* selectDia.setAttribute("disabled","disabled"); *@
                    }
                })

                document.getElementById(`tdsumahoras-${dataP.id}`).innerHTML = cantidadhoras;
            })
        }
        //========================================================

        //$('#tablaHorarios tfoot').append(strFooter);

        if (Tipo == 1 || Tipo == 3) {
            $('#DivRegistroHorario').dialog({
                title : titulo,
                buttons: {
                    "Guardar": () => {
                        RegistrarHorario(codHorario,Tipo);
                    },
                    "Cerrar": () => {
                        $('#DivRegistroHorario').dialog('close');
                        LimpiarHorario();
                    }
                },
                close: () => {
                    LimpiarHorario();
                }
            })

            $('#DivRegistroHorario').dialog("open");
        }
        //$('.tooltipsteredHora').tooltipster();
        //$('.tooltipsteredHora').tooltip();
    }

    function getDateOfWeek(week, year) {

        var primer = new Date(year, 0, 1 + (week - 1) * 7);
        var pDia = primer.getDay();
        var ISOweekStart = primer;
        if (pDia <= 4)
            ISOweekStart.setDate(primer.getDate() - primer.getDay() + 1);
        else
            ISOweekStart.setDate(primer.getDate() + 8 - primer.getDay());


        var ISOweekEnd = new Date(ISOweekStart.getTime() + 1000 * 60 * 60 * 24 * 6)
        return {
            FechaInicio: ISOweekStart.toLocaleDateString(),
            FechaFin: ISOweekEnd.toLocaleDateString(),
        }
    }

    async function obtenerUltimaProgramcion(){
        $('#tablaHorarios').css("display","");
        $('#tablaUltimoHorario').css("display","none");

        let valueOption = document.getElementById('selectUltimaProgramacion').value
        let FechaActual = new Date();
        if(valueOption == 1){
            $('#tablaHorarios').css("display","none");
            $('#tablaUltimoHorario').css("display","");
            let semPasada = FechaActual.getTime() - ( 7 * 24 * 60 * 60 * 1000 );
            semPasada = new Date(semPasada)
            var jsonFechas = getDateOfWeek(numeroDeSemana(semPasada),semPasada.getFullYear())
            let area = document.getElementById("selectArea").value;
            let persona = document.getElementById("selectPersona").value;

            const Data = {
                Procedimiento: "pna.ProcPersonaHorarioTurno",
                Parametro: `${persona}|${area}|${jsonFechas.FechaInicio}|${jsonFechas.FechaFin}`,
                Indice: 10
            }
            const response = await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            var jsonData = response['dt0'];
            var jsonFechas = response['dt1'];
            $('#tablaUltimoHorario tbody').empty();
            let strCuerpo2 = ''

            jsonData.map(function (data, i) {
                console.log(data)
                strCuerpo2 += ` <tr id="ultimo-${data.CodPersona}">
                                    <td style="vertical-align:middle;text-align: center;cursor: pointer; border-right: 2px solid rgb(96, 152, 185); white-space: nowrap; --darkreader-inline-border-right:#345e77;" data-darkreader-inline-border-right>${data.NomPersona}</td>`
                let horasTotales= 0
                jsonFechas.map(function(fecha, i) {
                    const [hInicio ,horaFin] = data[fecha.Dia].split('|')[1].split(' - ')
                    let hTotales = data[fecha.Dia].split('|')[3]
                    let empresa = data[fecha.Dia].split('|')[4].split('#')[1]
                    console.log(empresa)
                    horasTotales += convertirSegundos(hTotales == 0 ? '00:00' : hTotales)

                    if(hTotales!=0){
                        strCuerpo2 += `<td  style="text-align:center ">
                                            <input type="time" class="h-incio" onChange="actualizarHoraDia($(this).parent())"style="margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? '' : hInicio}"><br>
                                            <input type="time" class="h-fin" onChange="actualizarHoraDia($(this).parent())"style="margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? empresa : horaFin}"><br>
                                            <input type="time" class="h-total" style="margin-left:0px; margin-right: 0px; background-color: transparent;border: 0px;width: 75px;text-align: center;" maxlength="5" value="${hTotales == 0 ? '' : hTotales}">
                                        </td>`
                    }else{
                        strCuerpo2 += `<td style="text-align:center; vertical-align: middle"><br>${empresa}<br><br></td>`
                    }

                })
                
                strCuerpo2 += `<td class="cantidad-horas" style="text-align: center;text-align:center;vertical-align:middle">${ConvertirHora(horasTotales)}</td>
                                </tr>`


            })

            $('#tablaUltimoHorario tbody').append(strCuerpo2);
            @* $('#tablaUltimoHorario tbody').empty(); *@
            
        }
    } 
    //EXCEDE UNA HORA POR EL REFRIGERIO
    function actualizarHoraDia(tr){
        let horaInicio = tr[0].querySelector('.h-incio').value;
        let horaFin = tr[0].querySelector('.h-fin').value;
        let horalTotalColumna = tr[0].querySelector('.h-total');

        horalTotalColumna.value = ConvertirHora(convertirSegundos(horaFin) - convertirSegundos(horaInicio))
        actualizarHoraT(tr.parent())
    }  

    function actualizarHoraT(tr) {
        let arrHtotales = tr[0].querySelectorAll('.h-total')
        let cantHoras = tr[0].querySelector('.cantidad-horas')
        let nuevaHtotal = 0

        arrHtotales.forEach((n)=>{
            nuevaHtotal += convertirSegundos(n.value == 0 ? '00:00' : n.value)
        })

        cantHoras.innerHTML = ConvertirHora(nuevaHtotal)
    }

    async function obtenerEmpresas() {
        const request = {
            Procedimiento: "ProcGeneral", 
            Parametro: "", 
            Indice: 11
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(request, 'POST')).then(res => res.json())
        const empresas = response['dt0']

        return empresas;
    }

    async function obtenerRutas() {
        const request = {
            Procedimiento: "ProcRuta", 
            Parametro: '', 
            Indice: 12
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(request, 'POST')).then(res => res.json())
        const rutas = response['dt0']

        return rutas;
    }

    function mostrarHorarioDetalle(elemento) {
        console.log("abre el modal de empresas para los dias")
        const tr = elemento.parentNode.parentNode;
        const nombrePersonal = tr.children[0].textContent;
        const columnasDias = tr.querySelectorAll('.tdDays')
        let mostrarDialog = false;
        const bodyTHD = tablaHorarioDetalle.getElementsByTagName('tbody')[0];
        bodyTHD.innerHTML = ''

        columnasDias.forEach((td, i) => {
            const selectDia = td.children[0];
            const seleccionoHorario = selectDia.value == 0 ? false : true;

            if (seleccionoHorario) {
                mostrarDialog = true

                const trTHD = document.createElement('tr');
                const optionSeleccionado = selectDia.options[selectDia.selectedIndex];
                const turnoAbrev = optionSeleccionado.textContent;
                const turno = optionSeleccionado.getAttribute('data-nomturno');
                const horario = optionSeleccionado.getAttribute('title');
                const dia = td.getAttribute('data-dia')
                const parametrosActuales = selectDia.getAttribute('data-parametros-empresa')
                const parametroEmpresaInicial = parametrosActuales == '' ? `${arrEmpresas[0].CodEmpresa}#${arrEmpresas[0].NomEmpresa}#${arrRutas[0].CodRuta}#${arrRutas[0].NomRuta}#${arrRutas[0].Origen}` : parametrosActuales
                const arrParametrosEmpresa = parametroEmpresaInicial.split('#')

                trTHD.setAttribute('data-parametros-empresa', parametroEmpresaInicial)
                trTHD.setAttribute('select-afectado', selectDia.getAttribute('id'))

                //ACTIVAR LOS BUSCADORES
                console.log("llenado de empresas rutas y lugar de origen")
                trTHD.innerHTML = `
                    <td title="${turno}">${turnoAbrev}</td>
                    <td>${dia}</td>
                    <td>${horario.substring(0, 13)}</td>
                    <td>
                        <select class="select-buscador select-empresas" style="width: 200px">
                            ${
                                arrEmpresas.map(e => {
                                    return `<option value="${e.CodEmpresa}" ${arrParametrosEmpresa[0] == e.CodEmpresa ? 'selected' : ''}>${primeraLetraMayuscula(e.NomEmpresa)}</option>`
                                }).toString().replaceAll(',', '')
                            }
                        </select>
                    </td>
                    <td>
                        <select class="select-buscador select-rutas" style="width: 100px">
                        </select>
                    </td>
                    <td>
                        <select class="select-buscador select-origen-destino" style="width: 200px">
                        </select>
                    </td>
                `

                const codEmpresa = trTHD.querySelector('.select-empresas').value;

                trTHD.querySelector('.select-rutas').innerHTML = `
                    ${
                        codEmpresa == 4
                        ? '<option value="1">Lineal</option>'
                        : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresa).map(r => {
                            return `<option value="${r.CodRuta}" ${arrParametrosEmpresa[2] == r.CodRuta ? 'selected' : ''}>${r.NomRuta}</option>`
                        }).toString().replaceAll(',', '')
                    }
                `

                const codRuta = trTHD.querySelector('.select-rutas').value;

                trTHD.querySelector('.select-origen-destino').innerHTML = `
                    ${
                        codEmpresa == 4
                        ? '<option value="Los Olivos">Los Olivos</option>'
                        : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresa && ruta.CodRuta == codRuta).map(r => {
                            return `<option value="${r.Origen}" ${arrParametrosEmpresa[4] == r.Origen ? 'selected' : ''}>${primeraLetraMayuscula(r.Origen)}</option>
                                    <option value="${r.Destino}" ${arrParametrosEmpresa[4] == r.Destino ? 'selected' : ''}>${primeraLetraMayuscula(r.Destino)}</option>`
                        }).toString().replaceAll(',', '')
                    }
                `

                $(trTHD).on("change",".select-empresas", async (e) => accionesCombosEmpresas(e, true, true, false));
                $(trTHD).on("change",".select-rutas", async (e) => accionesCombosEmpresas(e, false, true, false));
                $(trTHD).on("change",".select-origen-destino", async (e) => accionesCombosEmpresas(e, false, false, true));

                bodyTHD.appendChild(trTHD)
                //Acciones
                
                accionesCombosEmpresas(trTHD.querySelector('.select-empresas'), true, true, false)
            }
        })

        if (!mostrarDialog) {
            ObjUtil.MostrarMensaje(`Debe seleccionar al menos un turno para ${nombrePersonal}`, 0)
            return
        }

        $('.select-buscador').select2()

        dialogHorarioDetalleJQ.dialog({
            title: `Seleccionar empresas para [${nombrePersonal}]`,
            buttons: [
                {
                    text: 'Guardar',
                    click: () => guardarEmpresasEnHorario(bodyTHD)
                },
                {
                    text: 'Cerrar',
                    click: () => dialogHorarioDetalleJQ.dialog('close')
                }
            ]
        })

        dialogHorarioDetalleJQ.dialog('open')
    }

    function accionesCombosEmpresas(e, esEmpresa, esRuta, esOrigenDestino) {
        const trActual = (e.target || e).parentNode.parentNode;
        const esPrimerHijo = trActual == trActual.parentNode.children[0];

        const selectEmpresaActual = trActual.querySelector('.select-empresas')
        const selectRutaActual = trActual.querySelector('.select-rutas')
        const selectOrigenDestinoActual = trActual.querySelector('.select-origen-destino')

        const codEmpresaSeleccionada = selectEmpresaActual.value;
        const nomEmpresaSeleccionada = selectEmpresaActual.options[selectEmpresaActual.selectedIndex].textContent;

        const cambiarElementosRuta = (tr) => {
            tr.querySelector('.select-rutas').innerHTML = `
                ${
                    codEmpresaSeleccionada == 4
                    ? '<option value="1">Lineal</option>'
                    : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresaSeleccionada).map(r => {
                        return `<option value="${r.CodRuta}">${r.NomRuta}</option>`
                    }).toString().replaceAll(',', '')
                }
            `

            tr.querySelector('.select-rutas').selectedIndex = 0;
            $('.select-rutas').select2()
        }

        const cambiarElementoOrigenDestino = (tr) => {
            const codRutaSeleccionada = trActual.querySelector('.select-rutas').value;

            tr.querySelector('.select-origen-destino').innerHTML = `
                ${
                    codEmpresaSeleccionada == 4
                    ? '<option value="Los Olivos">Los Olivos</option>'
                    : arrRutas.filter(ruta => ruta.CodEmpresa == codEmpresaSeleccionada && ruta.CodRuta == codRutaSeleccionada).map(r => {
                        return `<option value="${r.Origen}">${primeraLetraMayuscula(r.Origen)}</option>
                                <option value="${r.Destino}">${primeraLetraMayuscula(r.Destino)}</option>`
                    }).toString().replaceAll(',', '')
                }
            `

            tr.querySelector('.select-origen-destino').selectedIndex = 0
            $('.select-origen-destino' ).select2()
        }

        if (esPrimerHijo) {
            const bodyTHD = trActual.parentNode;
            const chilNodesTHD = bodyTHD.childNodes;
            const elementoAfectar = esEmpresa ? '.select-empresas' : (esRuta ? '.select-rutas' : '.select-origen-destino')
            const valorActual = trActual.querySelector(elementoAfectar).value
            
            for(let i = 0; i < chilNodesTHD.length; i++) {
                if (esEmpresa) cambiarElementosRuta(chilNodesTHD[i])
                if (esEmpresa || esRuta) cambiarElementoOrigenDestino(chilNodesTHD[i])

                chilNodesTHD[i].querySelector(elementoAfectar).value = valorActual
                $(elementoAfectar).select2()

                const codRutaSeleccionada = selectRutaActual.value;
                const nomRutaSeleccionada = selectRutaActual.options[selectRutaActual.selectedIndex].textContent;
                const codOrigenDestinoSeleccionada = selectOrigenDestinoActual.value;

                const parametrosEmpresa = `${codEmpresaSeleccionada}#${nomEmpresaSeleccionada}#${codRutaSeleccionada}#${nomRutaSeleccionada}#${codOrigenDestinoSeleccionada}`;
                chilNodesTHD[i].setAttribute('data-parametros-empresa', parametrosEmpresa);
            }
        } else {
            if (esEmpresa) cambiarElementosRuta(trActual)
            if (esEmpresa || esRuta) cambiarElementoOrigenDestino(trActual)

            const codRutaSeleccionada = selectRutaActual.value;
            const nomRutaSeleccionada = selectRutaActual.options[selectRutaActual.selectedIndex].textContent;
            const codOrigenDestinoSeleccionada = selectOrigenDestinoActual.value;

            const parametrosEmpresa = `${codEmpresaSeleccionada}#${nomEmpresaSeleccionada}#${codRutaSeleccionada}#${nomRutaSeleccionada}#${codOrigenDestinoSeleccionada}`;
            trActual.setAttribute('data-parametros-empresa', parametrosEmpresa);
        }
    }

    function guardarEmpresasEnHorario(body) {
        const chilNodes = body.childNodes;
        
        for(let i = 0; i < chilNodes.length; i++) {
            const tr = chilNodes[i];
            const selectAfectado = document.getElementById(tr.getAttribute('select-afectado'));
            const parametrosEmpresa = tr.getAttribute('data-parametros-empresa');

            selectAfectado.setAttribute('data-parametros-empresa', parametrosEmpresa);
        }

        ObjUtil.MostrarMensaje('Se guardaron los lugares a los horarios establecidos', 1)
        dialogHorarioDetalleJQ.dialog('close')
    }


    //VALIDANDO QUE SOLO SE PUEDA INSERTAR 7 DIAS EN LA OPCION DE TIPO HORARIO SEMANAL
    function RangoFechaSemanalValidacion() {
        let fechaInicio = document.getElementById("inputFechaInicio").value

        let minDay = moment(fechaInicio, "DD-MM-YYYY")
        let maxDay = moment(fechaInicio, "DD-MM-YYYY").add(6, 'day')

        $("#inputFechaFin").datepicker("option", "minDate", new Date(minDay.format("MM/DD/YYYY")))
        $("#inputFechaFin").datepicker("option", "maxDate", new Date(maxDay.format("MM/DD/YYYY")))
        document.getElementById("inputFechaInicio").value = minDay.format("DD/MM/YYYY")
        document.getElementById("inputFechaFin").value = maxDay.format("DD/MM/YYYY")
        DiasDisabled()
    }
    //=======================================================================================

    //ELIGIENDO LOS DIAS DE LA SEMANA NO SELECCIONADOS PARA DISABLEARLOS LUEGO
    function DiasDisabled() {
        arrayDiasDisabled = []
        let fechaInicio = document.getElementById("inputFechaInicio").value
        let fechaFin = document.getElementById("inputFechaFin").value

        let diaInicio = moment(fechaInicio, "DD-MM-YYYY")
        let diaFin = moment(fechaFin, "DD-MM-YYYY")

        if (diaFin.weekday() >= diaInicio.weekday()) {
            for (let i = diaInicio.weekday(); i <= diaFin.weekday(); i++) {
                arrayDiasDisabled.push(i);
            }
        } else {
            for (let i = 0; i <= diaFin.weekday(); i++) {
                arrayDiasDisabled.push(i);
            }
            for (let i = diaInicio.weekday(); i <= 6; i++) {
                arrayDiasDisabled.push(i);
            }
        }

        //DISABLEANDO LOS DIAS QUE NO ESTAN SELECCIONADOS Y PINTANDO DIA ACTUAL
        $('#tablaHorarios > tbody  > tr').each(function (j) {
            $(this).find("td").find(".selectsDays").each(function (i) {
                //DISABLEANDO DIAS NO SELECCIONADOS
                let existeDato = arrayDiasDisabled.indexOf(i)
                if (existeDato < 0) {
                    $(this).attr("disabled", true)
                    $(this).val(0).attr("selected", "selected")
                    SumarHoras($(this))
                } else {
                    $(this).attr("disabled", false)
                }
            });
            $(this).find(".tdDays").each(function (i) {
                //PINTANDO DIA ACTUAL
                if (diaInicio.weekday() == i) {
                    $(this).css("background", "#6098B9")
                    //$(this).css("border-right", "3px solid #000")
                    //$(this).css("border-left", "3px solid #000")
                    //if (j == 1) {
                    $(this).css("border-bottom", "3px solid #6098B9")
                    //}
                } else {
                    $(this).css("border", "none")
                    $(this).css("background", "none")
                }
            });
        });



    }
    //==========================================================================

    function RegistrarHorario(codHorario,Tipo) {
        console.log("GUARDAR HORARIO ")
        
        if (arrayMarcados.length == 0) {
            ObjUtil.MostrarMensaje("No hay usuarios que registrar, pruebe con otro tipo de horario", 0);
            return;
        }

        let tipoHorario = document.getElementById("selectTipoHorario").value;
        let fechaInicio = document.getElementById("inputFechaInicio").value;
        let fechaFin = document.getElementById("inputFechaFin").value;
        let separacion = Tipo == 1 ? '*' : '|';
        let arrayValidador = [];
        let arrayValidadorHoras = [];

        //VALIDAR FECHAS=======================
        let fechaInicioStamp = ObjUtil.convertDateToTimeStamp(`${fechaInicio} 00:00:00`);
        let fechaFinStamp = ObjUtil.convertDateToTimeStamp(`${fechaFin} 00:00:00`);

        if (tipoHorario != 1) {
            if (fechaInicioStamp > fechaFinStamp) {
                ObjUtil.MostrarMensaje('La fecha inicio no puede ser mayor a la fecha fin', 0);
                return true;
            }
        }
        //=====================================

        let parametros = '';
        let parametrosDias = '';
        let parametrosTurnos = '';
        let detenerFuncionPorEmpresa = false;
        let mensaje = ""

        arrayMarcados.map(function (dataMarcados, i) {
            let valorValidador = 0;
            let cantidadHora = document.getElementById(`tdsumahoras-${dataMarcados.id}`).innerHTML;

            parametrosDias = '';
            parametrosTurnos = '';

            arrayDias.map(function (dataDias, y) {
                const selectDia = document.getElementById(`select${y + 1}-${dataMarcados.id}`)
                let turno = selectDia.value;
                const parametrosEmpresa = turno > 0 ? selectDia.getAttribute("data-parametros-empresa") : '0##0##'

                if (turno > 0 && parametrosEmpresa == "") {
                    mensaje = `Debe seleccionar los lugares de servicios para ${dataMarcados.nombre}`
                    detenerFuncionPorEmpresa = true
                }
                //ACA ES DONDE SE DEBEN AGREGAR LOS 3 PARAMETROS :  HoraInicioTurno, HoraFinTurno, DuracionRefrigerio
                parametrosTurnos += `${turno}#${parametrosEmpresa}~`;
                
                valorValidador = 1;
                parametrosDias += `1${separacion}`;
            })

            parametrosDias = parametrosDias.substring(0, parametrosDias.length - 1);
            parametrosTurnos = parametrosTurnos.substring(0, parametrosTurnos.length - 1);
            parametros += `${Tipo == 1 ? dataMarcados.id : codHorario}${separacion}${fechaInicio}${separacion}${fechaFin}${separacion}${parametrosDias}${separacion}${0}${separacion}${cantidadHora}${separacion}${parametrosTurnos}^`;    //se esta poniendo un cero en durito para que base de datos reciba como horario flexible

            ValidacionesHorarios(valorValidador, dataMarcados.nombre, dataMarcados.id);
            ValidacionesTotalHoras(cantidadHora, dataMarcados.nombre, dataMarcados.id);
            arrayValidador.push(valorValidador);
            arrayValidadorHoras.push(cantidadHora);
            if (detenerFuncionPorEmpresa) ObjUtil.MostrarMensaje(mensaje, 0);
        })

        if (detenerFuncionPorEmpresa) {
            return
        }

        let detenerFuncion = DetenerFuncionFuc(arrayValidador);

        if (detenerFuncion) {
            return;
        }

        let detenerFuncionHoras = DetenerFuncionFucHoras(arrayValidadorHoras);

        if (detenerFuncionHoras) {
            return;
        }

        parametros = parametros.substring(0, parametros.length - 1);
        Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: `${codUser}|${parametros}`,
            Indice: Tipo == 1 ? 20 : 30
        }
        
        fetch(UrlGeneral, DataFetch(Data,'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'][0];
                ObjUtil.MostrarMensaje(jsonData.DesResultado, (jsonData.CodResultado == 1 ? 1 : 0));
                if (jsonData.CodResultado == 1) {
                    $('#DivRegistroHorario').dialog('close');
                    document.getElementById('selectPersona').value = 0;
                    $('#selectPersona').select2();
                    ObtenerPersonas();
                }
            })


    }

    function AnularHorario(tr) {
        let CodHorario = tr.attr('data-codhorario');
        let nomPersona = tr.attr('data-nompersona');

        $('#DivAnular').dialog({
            title : `Anular Horario de [ " ${nomPersona} " ]`,
            buttons: {
                'Si': function () {
                    Data = {
                                Procedimiento: 'pna.ProcPersonaHorarioTurno ',
                                Parametro: `${codUser}|${CodHorario}|${$('#txtAreaElimina').val()}`,
                                Indice: 40
                            }
                        fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
                        .then(Datos => {
                            let jsonData = Datos['dt0'][0];
                            ObjUtil.MostrarMensaje(jsonData.DesResultado, (jsonData.CodResultado == 1 ? 1 : 0));
                            if (jsonData.CodResultado == 1) {
                                $('#DivAnular').dialog('close');
                                ListarHorarios();
                            }       
                        })
                },
                'No': function () {
                    $('#txtAreaElimina').val("");
                    $(this).dialog('close');
                }
            },
            close: function () {
                $('#txtAreaAnular').val('');
            }
        })
        $('#DivAnular').dialog('open');
        $('#txtAreaElimina').val("");
    }

    function ValidacionesHorarios(valorValidador, persona, id) {
        if (valorValidador == 0) {
            ObjUtil.MostrarMensaje(`Debe digitar al menos un horario para ${persona}`, 0);
            document.getElementById(`persona-${id}`).style.color = 'red';
            return true;
        }
        return false;
    }

    function ValidacionesTotalHoras(cantidadHora, persona, id) {
        if (Number(cantidadHora.split(":")[0]) == 100 && Number(cantidadHora.split(":")[1]) > 0 || Number(cantidadHora.split(":")[0]) > 100) {
            ObjUtil.MostrarMensaje(`La hora maxima laboral de la ${persona} no debe ser mayor a 48:00 horas`, 0);
            document.getElementById(`persona-${id}`).style.color = 'blue';
            return;
        } 
        return false;
    
    }

    function DetenerFuncionFuc(array) {
        let variableRetornar = false;
        array.map(function (data, i) {
            if (data == 0) {
                variableRetornar = true;
            }
        })
        return variableRetornar;
    }

    function DetenerFuncionFucHoras(array) {
        let variableRetornar = false;
        array.map(function (data, i) {
            if (Number(data.split(":")[0]) == 300 && Number(data.split(":")[1]) > 0 || Number(data.split(":")[0]) > 300) {
                variableRetornar = true;
            }
        })
        return variableRetornar;
    }

    function ActivarDia(Dia, Posicion) {
        let CheckActivacion = document.getElementById(`checkActivacion${Posicion}`).checked ? 1 : 0;
        if (CheckActivacion == 1) {
            arrayMarcados.map(function (data, i) {
                document.getElementById(Dia + '' + (i + 1)).removeAttribute('readonly', 'readonly');
                document.getElementById(`b${Dia}${i + 1}`).removeAttribute('disabled');
            })
        } else {
            arrayMarcados.map(function (data, i) {
                document.getElementById(`${Dia}${i + 1}`).value = '';
                document.getElementById(Dia + '' + (i + 1)).setAttribute('readonly', 'readonly');
                document.getElementById(`b${Dia}${i+1}`).setAttribute('disabled',true);
            })
        }
    }

    function VerificarHora(element, event) {

        let inputSeleccionado = element[0].id;
        var valorInput = element[0].value;
        if (valorInput.length == 1 && valorInput > 2) {
            valorInput = '0' + valorInput;
        }
        if (valorInput.length == 2 && event.keyCode == 8) {

            valorInput = valorInput.split("")[0];
            element[0].value = valorInput;
        }
        if (valorInput.length == 2 && event.keyCode != 8) {
            if (valorInput > 23) {
                valorInput = 23;
            }
            valorInput = valorInput + ':';
            element[0].value = valorInput;
        }
        if (valorInput.length == 4 && valorInput.split(":")[1] > 5) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
        if (valorInput.length == 5 && valorInput.split(":")[1] > 59) {
            valorInput = valorInput.split(":")[0] + ':59';
            element[0].value = valorInput;
        }
    }

    async function ObtenerAreas() {
        $('#selectArea').empty();
        Data = {
            Procedimiento: 'ProcGeneral',
            Parametro: '',
            Indice: 3
        }

        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {

                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                strCuerpo += '<option value="0">--TODOS--</option>';
                jsonData.map(function (data, i) {
                    strCuerpo += '<option  data-cadenaConexion="" value="' + data.CodArea + '">' + data.NomArea + '</option>';
                })

                $('#selectArea').append(strCuerpo);
                //$('#selectTipoHorario').select2();
                //cargarEstados();
            })
    }

    //SELECTS PARA EL EDITADO 
    async function cargarComboEmpresas() {
        $('#selectEmpresaModalDetalle').empty();
        const Data = {
            Procedimiento: 'dbo.ProcEmpresaV2',
            Parametro: '',
            Indice: 13
        }

        const response = await fetch(urlBDGeneralTGPS, DataFetch(Data, 'POST')).then(res => res.json());
        const jsonData = response['dt0'];

        let strCuerpo = ''
        jsonData.map(function (data, i) {
            strCuerpo += `<option data-cadenaconexion="${data.CadenaConexion}" value="${data.CodEmpresa}">${data.NomEmpresa} </option>`;
        })
        $('#selectEmpresaModalDetalle').append(strCuerpo);
    }

    async function cargarComboRutasEditado() {
        var cadenaConexion = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].getAttribute('data-cadenaconexion');

        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro:'', 
            Indice: 13,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrRuta = response['dt0'];
        console.log(response)
        let option = '';
        arrRuta.forEach((ruta) => {
            option += `<option value="${ruta.CodRuta}">${ruta.NomRuta}</option>`;
        })
        selectRutaEdit.innerHTML = option
    }

    async function cargarComboDestinoEditado() {
        var cadenaConexion = selectEmpresaEdit.options[selectEmpresaEdit.selectedIndex].getAttribute('data-cadenaconexion'); 

        const Data ={
            Procedimiento: 'ProcRutaV3',
            Parametro: selectRutaEdit.value, 
            Indice: 51,
            Cadena: cadenaConexion // ProcGeneralPostBDParticular pide 4 campos GeneralPost.cs para validarlo
        }
        const response = await fetch(urlBdParticular, DataFetch(Data, 'POST')).then(res => res.json());
        const arrDestino = response['dt0'];
        let option = '';
        arrDestino.forEach((dt) => {
            option += `<option value="${dt.Destino}">${dt.Destino}</option>`;
        })
        selectDestinoEdit.innerHTML = option
    }

    async function eventos(){

        await selectEmpresaEdit.addEventListener('change', () => cargarComboRutasEditado());
        await selectEmpresaEdit.addEventListener('change', () => cargarComboDestinoEditado());
        await selectRutaEdit.addEventListener('change', () => cargarComboDestinoEditado());

    }
    //SELECTS PARA EL EDITADO 

    @* async function cargarEstados() {

        var Data = {
            Procedimiento: 'pna.ProcPersonaHorarioTurno',
            Parametro: '',
            Indice: 12
        }
        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                var jsonData = Datos['dt0'];
                var strHtml = '<li data-codestado ="0"><a href="#" class="small" value="0" data-value="option1" tabindex="-1"><input type="checkbox" onclick="funcionEstadoTodos($(this),1) " /> TODOS</a></li>';
                $('#selEstado').empty();
                $.each(jsonData, function () {
                    strHtml += '<li data-codestado="' + this.CodEstado + '"><a href="#" class="small" value="0" data-value="option1" onclick="funcionEstadoTodos($(this),2)" tabindex="-1">' +
                        `<input type="checkbox" ${this.CodEstado == 1 ? 'checked' : ''} /> ${this.NomEstado} </a></li>`;
                })
                $('#selEstado').append(strHtml);
            })
    } *@

    async function ObtenerPersonas() {
        $('#selectPersona').empty();
        Data = {
            Procedimiento: 'ProcPersona',
            Parametro: `${document.getElementById("selectArea").value}`,
            Indice: 18
        }
        await fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                strCuerpo += '<option value="0">--TODOS--</option>';
                jsonData.map(function (data, i) {
                    strCuerpo += '<option value="' + data.CodPersona + '" data-tipohorario="'+ data.CodHorarioTipo +'" data-registrahorario="'+ data.RegistraHorario +'">' + data.NomPersona + '</option>';
                })

                $('#selectPersona').append(strCuerpo);
                $('#selectPersona').select2();
            })
    }

    const MostarTipoHorario = () => {
        Data = {
            Procedimiento: 'pna.ProcPersonaContrato',
            Parametro: '',
            Indice: 12
        }

        fetch(UrlGeneral, DataFetch(Data, 'POST')).then(res => res.json())
            .then(Datos => {
                let jsonData = Datos['dt0'];
                let strCuerpo = ''
                jsonData.map(function (data, i) {
                    strCuerpo += '<option value="' + data.CodHorarioTipo + '">' + data.NomHorarioTipo + '</option>';
                })

                $('#selectTipoHorario').append(strCuerpo);
                //$('#selectTipoHorario').select2();
            })
    }

    async function ObtenerTurnos() {

        Data = {
            Procedimiento: 'pna.ProcTurno',
            Parametro: '',
            Indice: 10
        }

        const res = await fetch(UrlGeneral, DataFetch(Data, 'POST'))
        const Datos = res.json()
        return Datos;

    }

    function SumarHoras(element) {
        let sumaHoras = 0;
        let Horas = '';


        arrayDias.map(function (data, i) {
            let selectSelccionado = $(`#select${i+1}-${element[0].id.split("-")[1]} option:selected`).val();
            if (selectSelccionado == 0) {
                $(`#select${i+1}-${element[0].id.split("-")[1]}`).attr('data-parametros-empresa', '')
                Horas = '00:00';
            } else {
                Horas = $(`#select${i+1}-${element[0].id.split("-")[1]} option:selected`)[0]['dataset']['cantidadhoras'];
            }
            sumaHoras += convertirSegundos(Horas);
        })

        sumaHoras = ConvertirHora(sumaHoras);

        document.getElementById(`tdsumahoras-${element[0].id.split("-")[1]}`).innerHTML = sumaHoras;
        document.getElementById(`persona-${element[0].id.split("-")[1]}`).style.color = 'black';
    }

    function convertirSegundos(Horas){
        var horas = Horas.split(':')[0];
        var minutos = Horas.split(':')[1];

        horas = parseFloat(horas);
        minutos = parseFloat(minutos);


        var horas_Segundos = horas * 3600;
        var minutos_Segundos = minutos * 60;
        let segundos = minutos_Segundos + horas_Segundos;


        // 2:41:30
        return segundos;

    }

    function ConvertirHora(segundos) {
        var hours = Math.floor( segundos / 3600 );
        var minutes = Math.floor( (segundos % 3600) / 60 );

        //Anteponiendo un 0 a los minutos si son menos de 10
        minutes = minutes < 10 ? '0' + minutes : minutes;

        //Anteponiendo un 0 a los segundos si son menos de 10
        hours = hours < 10 ? '0' + hours : hours;

        var result = hours + ":" + minutes;
        return result;
    }

    function LimpiarTabla(Tipo) {
        $('#tablaHorariosLista thead').empty();
        $('#tablaHorariosLista tbody').empty();

        let strCabecera = '';
        let strCuerpo = '';

        strCabecera = `<tr>
                        <th style="text-align:center;width:50px">N°</th>
                        <th style="text-align:left">PERSONA</th>
                        <th style="text-align:center;white-space:nowrap">TIPO HORARIO</th>
                        <th style="text-align:center">AREA</th>
                        <th style="text-align:center;white-space:nowrap">CANT. HORAS</th>
                        <th style="text-align:center;white-space:nowrap"></th>
                        <th style="text-align:center;white-space:nowrap"></th>
                    </tr>`;
        if (Tipo == 1) {
            strCuerpo += `<tr><td colspan="8" style="text-align:center">Presione el boton procesar</td><tr>`;
        } else {
            strCuerpo += `<tr><td colspan="8" style="text-align:center">No hay información que mostrar con los parametros seleccionados</td><tr>`;
        }


        $('#tablaHorariosLista thead').append(strCabecera);
        $('#tablaHorariosLista tbody').append(strCuerpo);
    }

    function exportaHorarios() {
        var opciones = {
            sistema: 'REPORTE DE HORARIOS',
            title: 'REPORTE DE HORARIOS',
            filename: 'REPORTE DE HORARIOS',
            empresa: nomEmpresa,
        }
        var parametros = {
            ruc: Ruc,
            nomUsuario: NomUsuario,
            fechaInicio: ObjUtil.ObtenerFechaActual(),
        }
        fnExcelReport("tablaHorariosExportar", opciones, parametros, "REPORTE DE HORARIOS");
    }

    function LimpiarHorario() {
        document.getElementById('selectTipoHorario').value = 1;
        document.getElementById('selectTipoHorario').removeAttribute('disabled');
        $('#selectTipoHorario').select2();
        document.getElementById('inputFechaInicio').value = FechaActual;
        document.getElementById('inputFechaFin').value = FechaActual;
        document.getElementById("inputFechaInicio").removeAttribute("disabled");
        document.getElementById("inputFechaFin").removeAttribute("disabled");
    }

    function cargarAnio(){
        $('#selectAnio').empty();
        var strHtml ="";
        for(var i=2019; i<=anioactual+1; i++){
            strHtml += `<option value="${i}">${i}</option>`
        }

        $('#selectAnio').append(strHtml);
        $('#selectAnio').select2();
    }

    function cargarSemana(){
        $('#selectSemana').empty();
        var strHtml ="";
        for(var i=1; i<=52; i++){
            strHtml += `<option value="${i}">${i}</option>`
        }

        $('#selectSemana').append(strHtml);
        $('#selectSemana').select2();
        
    }

    function calcularFecha(fechaInicialSemana,numeroDia){
        let fecha =""
        let cantidadDiasMes = new Date(parseInt(fechaInicialSemana.slice(-4)),parseInt(fechaInicialSemana.slice(3,5)), 0).getDate()
        let diaInicioSemana = parseInt(fechaInicialGeneral.slice(0,2))
        let mesInicioSemana = parseInt(fechaInicialGeneral.slice(3,5))
        let anioSemana = parseInt(fechaInicialGeneral.slice(6,10))
        console.log("fecha completa: ",fechaInicialSemana,"dia: ",diaInicioSemana,"mes: ",mesInicioSemana,"año: ",anioSemana,"numero de dia: ",numeroDia)
        let diaDeFechaRetornada = ""
        if((diaInicioSemana+parseInt(numeroDia))<=cantidadDiasMes){
            diaDeFechaRetornada = diaInicioSemana + parseInt(numeroDia) 
        }else{
            let diasSumados = cantidadDiasMes - diaInicioSemana
            diaDeFechaRetornada = parseInt(numeroDia) - diasSumados
            mesInicioSemana=((mesInicioSemana+1)<=12)?(mesInicioSemana+1):1
        }

        fecha=`${dosDigitos(diaDeFechaRetornada)}/${dosDigitos(mesInicioSemana)}/${anioSemana}`
        return fecha
    }

    function dosDigitos(numero){
        let numeroConDosDigitos = ""
        if(numero.toString().length==1){
            numeroConDosDigitos="0"+numero
        }else numeroConDosDigitos = numero
        return numeroConDosDigitos
    }
</script>
